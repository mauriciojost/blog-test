<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mauricio Jost</title>
    <description></description>
    <link>http://mauriciojost.github.io/</link>
    <atom:link href="http://mauriciojost.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 25 Dec 2017 12:56:00 +0100</pubDate>
    <lastBuildDate>Mon, 25 Dec 2017 12:56:00 +0100</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Exception Handling in Spark 2.x</title>
        <description>&lt;h1 id=&quot;why-exception-handling-e-h-in-spark&quot;&gt;Why Exception Handling (E.H.) in Spark?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data is rarely ideal&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;some scenarios don&amp;#39;t deserve an &lt;strong&gt;immediate&lt;/strong&gt; halt&lt;/li&gt;
&lt;li&gt;investigate newer scenarios as-per-priority (happier customers)&lt;/li&gt;
&lt;li&gt;ease product evolution&lt;/li&gt;
&lt;li&gt;understand application limitations&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-are-exceptions&quot;&gt;What are Exceptions?&lt;/h1&gt;

&lt;p&gt;Exceptions are &lt;strong&gt;failures&lt;/strong&gt; that &lt;strong&gt;prevent our code from completing successfully an operation&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Generally speaking, in the batch &amp;amp; streaming processing world, correctly handling exceptions
gives the development team more time to evaluate logs and better decide how to handle different scenarios.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;types-of-failures&quot;&gt;Types of Failures&lt;/h1&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Failures &lt;a href=&quot;https://tersesystems.com/blog/2012/12/27/error-handling-in-scala/&quot;&gt;can be classified as&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Expected Internal&lt;/strong&gt; (a circuit breaker)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expected External&lt;/strong&gt; (a parsing exception)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unexpected Internal&lt;/strong&gt; (a &lt;code&gt;NullPointerException&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unexpected External&lt;/strong&gt; (a host down)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;Among others, failures can be classified by importance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NonFatal&lt;/code&gt; (can be recovered)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fatal&lt;/code&gt; (cannot be recovered)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Or by determinism:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Deterministic&lt;/code&gt; (can be reproduced consistently)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Non deterministic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;spark-exception-handling-e-h&quot;&gt;Spark Exception Handling (E.H.)&lt;/h2&gt;

&lt;p&gt;Generally speaking, Spark exceptions can be divided in two groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unexpected failures&lt;/strong&gt;: generally non-deterministic, fatal or non fatal (Spark framework via task retries)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expected failures&lt;/strong&gt;: generally deterministic, non fatal -&amp;gt; &lt;strong&gt;this post&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;application-e-h-approaches&quot;&gt;Application E.H. approaches&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The no-exception-handling approach&lt;/li&gt;
&lt;li&gt;The try-catch and log approach&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Try&lt;/code&gt; / &lt;code&gt;Either&lt;/code&gt; approach&lt;/li&gt;
&lt;li&gt;The Accumulator approach&lt;/li&gt;
&lt;li&gt;More evolved approaches&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-no-exception-handling-approach&quot;&gt;The no-exception-handling approach&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The world has to be ideal, or crash.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Spark app will fail if upon retries a task keeps failing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim contenteditable&gt;
def country(cityCode: String): String = {
  cities(cityCode).get.country
  // the city has to be found!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;When to use? Prototypes only.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-try-catch-and-log-approach&quot;&gt;The try-catch and log approach&lt;/h2&gt;

&lt;p&gt;Report unexpected scenarios via logs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;May generate significant amount of logs (performance!)&lt;/li&gt;
&lt;li&gt;Generally not purely functional&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim contenteditable&gt;
def country(cityCode: String): String = {
  try {
    cities(cityCode).get.country
  } catch {
    Log.warn(s&quot;Unexpected city $cityCode&quot;)
    &quot;UnknownCountry&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;Not really appealing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requires the use of RM tools to retrieve logs (as not in HDFS)&lt;/li&gt;
&lt;li&gt;Difficult to test&lt;/li&gt;
&lt;li&gt;However provides by default multiple levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-try-either-approach&quot;&gt;The &lt;code&gt;Try&lt;/code&gt; / &lt;code&gt;Either&lt;/code&gt; approach&lt;/h2&gt;

&lt;p&gt;Return &lt;code&gt;Try&lt;/code&gt; / &lt;code&gt;Either&lt;/code&gt; types always.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purely functional&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exception&lt;/code&gt; reports are part of the output of a transformation&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim contenteditable&gt;
def country(cityCode: String): Try[String] = {
  Try{cities(cityCode).get.country}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;Maybe the most appealing approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Results are stored in HDFS&lt;/li&gt;
&lt;li&gt;Easy to test&lt;/li&gt;
&lt;li&gt;Easy to reason about&lt;/li&gt;
&lt;li&gt;Spark/Hadoop agnostic&lt;/li&gt;
&lt;li&gt;Can be tricky to save simultaneously &lt;code&gt;Success&lt;/code&gt;/&lt;code&gt;Right&lt;/code&gt; and &lt;code&gt;Failure&lt;/code&gt;/&lt;code&gt;Left&lt;/code&gt; sides (could be slow, requiring multiple actions to be triggered)&lt;/li&gt;
&lt;li&gt;Does not provide support for levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-accumulator-approach&quot;&gt;The Accumulator approach&lt;/h2&gt;

&lt;p&gt;Use the Spark &lt;code&gt;Accumulator&lt;/code&gt; mechanism to report statistics on specific scenarios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not meant to retrieve detailed information about the failure&lt;/li&gt;
&lt;li&gt;Function argument is mutable (often seen as bad practice)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim contenteditable&gt;
def country(cityCode: String, ac: Accumulator): String = {
  cities(cityCode) match {
    case Some(city) =&gt; city.country
    case None =&gt; {ac += 1; &quot;UnknownCountry&quot;}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;The Spark approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Results can be printed in &lt;code&gt;stdout&lt;/code&gt; or stored in HDFS easily&lt;/li&gt;
&lt;li&gt;Relatively easy to test&lt;/li&gt;
&lt;li&gt;Spark framework dependant&lt;/li&gt;
&lt;li&gt;Should be very fast&lt;/li&gt;
&lt;li&gt;Does not provide support for levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;more-evolved-approaches&quot;&gt;More evolved approaches&lt;/h2&gt;

&lt;p&gt;Will be in a different post.&lt;/p&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

&lt;p&gt;If you have any comments, let me know!&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Nov 2017 23:00:00 +0100</pubDate>
        <link>http://mauriciojost.github.io/2017/11/07/exception-handling-in-spark-2/post.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/11/07/exception-handling-in-spark-2/post.html</guid>
        
        <category>scala</category>
        
        <category>spark</category>
        
        <category>error</category>
        
        <category>exception</category>
        
        <category>handling</category>
        
        <category>try</category>
        
        <category>catch</category>
        
        
      </item>
    
      <item>
        <title>Exception Handling in Spark 2.x</title>
        <description>&lt;h1 id=&quot;why-exception-handling-e-h-in-spark&quot;&gt;Why Exception Handling (E.H.) in Spark?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data is rarely ideal&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;some scenarios don&amp;#39;t deserve an &lt;strong&gt;immediate&lt;/strong&gt; halt&lt;/li&gt;
&lt;li&gt;investigate newer scenarios as-per-priority (happier customers)&lt;/li&gt;
&lt;li&gt;ease product evolution&lt;/li&gt;
&lt;li&gt;understand application limitations&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-are-exceptions&quot;&gt;What are Exceptions?&lt;/h1&gt;

&lt;p&gt;Exceptions are &lt;strong&gt;failures&lt;/strong&gt; that &lt;strong&gt;prevent our code from completing successfully an operation&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Generally speaking, in the batch &amp;amp; streaming processing world, correctly handling exceptions
gives the development team more time to evaluate logs and better decide how to handle different scenarios.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;types-of-failures&quot;&gt;Types of Failures&lt;/h1&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Failures &lt;a href=&quot;https://tersesystems.com/blog/2012/12/27/error-handling-in-scala/&quot;&gt;can be classified as&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Expected Internal&lt;/strong&gt; (a circuit breaker)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expected External&lt;/strong&gt; (a parsing exception)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unexpected Internal&lt;/strong&gt; (a &lt;code&gt;NullPointerException&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unexpected External&lt;/strong&gt; (a host down)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;Among others, failures can be classified by importance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NonFatal&lt;/code&gt; (can be recovered)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fatal&lt;/code&gt; (cannot be recovered)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Or by determinism:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Deterministic&lt;/code&gt; (can be reproduced consistently)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Non deterministic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;spark-exception-handling-e-h&quot;&gt;Spark Exception Handling (E.H.)&lt;/h2&gt;

&lt;p&gt;Generally speaking, Spark exceptions can be divided in two groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unexpected failures&lt;/strong&gt;: generally non-deterministic, fatal or non fatal (Spark framework via task retries)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expected failures&lt;/strong&gt;: generally deterministic, non fatal -&amp;gt; &lt;strong&gt;this post&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;application-e-h-approaches&quot;&gt;Application E.H. approaches&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The no-exception-handling approach&lt;/li&gt;
&lt;li&gt;The try-catch and log approach&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Try&lt;/code&gt; / &lt;code&gt;Either&lt;/code&gt; approach&lt;/li&gt;
&lt;li&gt;The Accumulator approach&lt;/li&gt;
&lt;li&gt;More evolved approaches&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-no-exception-handling-approach&quot;&gt;The no-exception-handling approach&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The world has to be ideal, or crash.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Spark app will fail if upon retries a task keeps failing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim contenteditable&gt;
def country(cityCode: String): String = {
  cities(cityCode).get.country
  // the city has to be found!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;When to use? Prototypes only.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-try-catch-and-log-approach&quot;&gt;The try-catch and log approach&lt;/h2&gt;

&lt;p&gt;Report unexpected scenarios via logs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;May generate significant amount of logs (performance!)&lt;/li&gt;
&lt;li&gt;Generally not purely functional&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim contenteditable&gt;
def country(cityCode: String): String = {
  try {
    cities(cityCode).get.country
  } catch {
    Log.warn(s&quot;Unexpected city $cityCode&quot;)
    &quot;UnknownCountry&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;Not really appealing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requires the use of RM tools to retrieve logs (as not in HDFS)&lt;/li&gt;
&lt;li&gt;Difficult to test&lt;/li&gt;
&lt;li&gt;However provides by default multiple levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-try-either-approach&quot;&gt;The &lt;code&gt;Try&lt;/code&gt; / &lt;code&gt;Either&lt;/code&gt; approach&lt;/h2&gt;

&lt;p&gt;Return &lt;code&gt;Try&lt;/code&gt; / &lt;code&gt;Either&lt;/code&gt; types always.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purely functional&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exception&lt;/code&gt; reports are part of the output of a transformation&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim contenteditable&gt;
def country(cityCode: String): Try[String] = {
  Try{cities(cityCode).get.country}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;Maybe the most appealing approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Results are stored in HDFS&lt;/li&gt;
&lt;li&gt;Easy to test&lt;/li&gt;
&lt;li&gt;Easy to reason about&lt;/li&gt;
&lt;li&gt;Spark/Hadoop agnostic&lt;/li&gt;
&lt;li&gt;Can be tricky to save simultaneously &lt;code&gt;Success&lt;/code&gt;/&lt;code&gt;Right&lt;/code&gt; and &lt;code&gt;Failure&lt;/code&gt;/&lt;code&gt;Left&lt;/code&gt; sides (could be slow, requiring multiple actions to be triggered)&lt;/li&gt;
&lt;li&gt;Does not provide support for levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-accumulator-approach&quot;&gt;The Accumulator approach&lt;/h2&gt;

&lt;p&gt;Use the Spark &lt;code&gt;Accumulator&lt;/code&gt; mechanism to report statistics on specific scenarios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not meant to retrieve detailed information about the failure&lt;/li&gt;
&lt;li&gt;Function argument is mutable (often seen as bad practice)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim contenteditable&gt;
def country(cityCode: String, ac: Accumulator): String = {
  cities(cityCode) match {
    case Some(city) =&gt; city.country
    case None =&gt; {ac += 1; &quot;UnknownCountry&quot;}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;The Spark approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Results can be printed in &lt;code&gt;stdout&lt;/code&gt; or stored in HDFS easily&lt;/li&gt;
&lt;li&gt;Relatively easy to test&lt;/li&gt;
&lt;li&gt;Spark framework dependant&lt;/li&gt;
&lt;li&gt;Should be very fast&lt;/li&gt;
&lt;li&gt;Does not provide support for levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;more-evolved-approaches&quot;&gt;More evolved approaches&lt;/h2&gt;

&lt;p&gt;Will be in a different post.&lt;/p&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

&lt;p&gt;If you have any comments, let me know!&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Nov 2017 23:00:00 +0100</pubDate>
        <link>http://mauriciojost.github.io/2017/11/07/exception-handling-in-spark-2/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/11/07/exception-handling-in-spark-2/presentation.html</guid>
        
        <category>scala</category>
        
        <category>spark</category>
        
        <category>error</category>
        
        <category>exception</category>
        
        <category>handling</category>
        
        <category>try</category>
        
        <category>catch</category>
        
        
      </item>
    
      <item>
        <title>Dotfiles</title>
        <description>&lt;h2 id=&quot;dotfiles-me&quot;&gt;Dotfiles? Me?&lt;/h2&gt;

&lt;p&gt;You&amp;#39;re eligible if you use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;macOS&lt;/li&gt;
&lt;li&gt;Cygwin (over Windows)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;And if at least one of the below is true:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you often ‎&lt;strong&gt;can&amp;#39;t remember commands&lt;/strong&gt; and flags&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;git log --oneline \
  --decorate --all \
  --graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;you often &lt;strong&gt;lose configs&lt;/strong&gt; of your apps (&lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;htop&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;you often use &lt;strong&gt;hostile shell&lt;/strong&gt; in many remote hosts&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;gt;_
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;you happen to enjoy a very &lt;strong&gt;&lt;span style=&quot;color:green&quot;&gt;color&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;ful &lt;/span&gt;&lt;span style=&quot;color:red&quot;&gt;environ&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:yellow&quot;&gt;ment&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;dotfiles-to-the-rescue&quot;&gt;Dotfiles to the rescue!&lt;/h2&gt;

&lt;p&gt;Dotfiles is an initiative &lt;a href=&quot;https://dotfiles.github.io/&quot;&gt;driven by GitHub&lt;/a&gt; to
keep configuration files (and more) in a repository.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;dotfiles-principles&quot;&gt;Dotfiles principles&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;customization&lt;/li&gt;
&lt;li&gt;versioning&lt;/li&gt;
&lt;li&gt;sharing&lt;/li&gt;
&lt;li&gt;reusing&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;why-the-name-dotfiles&quot;&gt;Why the name dotfiles?&lt;/h2&gt;

&lt;p&gt;Files starting with &lt;strong&gt;dot&lt;/strong&gt; are often configuration files:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;mjost@lapin:~$ ls -lAugh \.
total 13M
drwx------   4 mjost 4.0K Oct 21 09:51 .activator
-rw-------   1 mjost 6.3K Oct 25 08:17 .aliases
drwx------   3 mjost 4.0K Oct 21 09:51 .android
drwx------   3 mjost 4.0K Oct 21 09:51 .ansible
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;h2 id=&quot;who-uses-dotfiles&quot;&gt;Who uses dotfiles?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mathiasbynens/dotfiles&quot;&gt;Mathias dotfiles&lt;/a&gt;: 17k GitHub stars (*)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apache/spark&quot;&gt;Apache Spark&lt;/a&gt;: 14k GitHub stars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many flavors, you fork your favorite one!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(*) only one flavor!!!&lt;/em&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;what-can-dotfiles-contain&quot;&gt;What can dotfiles contain?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Shell aliases and functions&lt;/li&gt;
&lt;li&gt;‎Any file &lt;code&gt;.xxx&lt;/code&gt; under &lt;code&gt;$HOME&lt;/code&gt; (like &lt;code&gt;.bashrc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;‎Any directory under &lt;code&gt;~/.config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;what-ive-personally-added&quot;&gt;What I&amp;#39;ve personally added?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Window managers&lt;/strong&gt; settings (like &lt;code&gt;awesome&lt;/code&gt; &amp;amp; &lt;code&gt;xfce&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cron job&lt;/strong&gt; to &lt;code&gt;renice&lt;/code&gt; Intellij&lt;/li&gt;
&lt;li&gt;Integration with &lt;strong&gt;&lt;a href=&quot;https://github.com/kepkin/dev-shell-essentials&quot;&gt;dev-shell-essentials&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;echo &quot;a cat&quot; | highlight green a | highlight red cat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;‎Stderr in &lt;span &lt;span style=&quot;color:red&quot;&gt;red&lt;/span&gt;&lt;/strong&gt; using &lt;a href=&quot;https://github.com/sickill/stderred&quot;&gt;&lt;code&gt;stderred&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;‎&lt;strong&gt;Code snippets&lt;/strong&gt; (for Bash specially)&lt;/li&gt;
&lt;li&gt;‎&lt;strong&gt;How-To&amp;#39;s&lt;/strong&gt; (set up servers like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;nfs&lt;/code&gt;, &lt;code&gt;ldap&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tag with &lt;code&gt;$SESSION_ID&lt;/code&gt;&lt;/strong&gt; commands in history&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tag with &lt;code&gt;$PWD&lt;/code&gt;&lt;/strong&gt; commands in history&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aliases&lt;/strong&gt; for commands like &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt; and others&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key Mappings&lt;/strong&gt; for Intellij&lt;/li&gt;
&lt;li&gt;and much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;how-to-get-started-with-dotfiles&quot;&gt;How to get started with dotfiles?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Choose your &lt;a href=&quot;https://dotfiles.github.io/&quot;&gt;flavor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install it and use it!&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot; data-trim contenteditable&gt;
# clone your flavor
git clone \
  https://github.com/mathiasbynens/dotfiles.git
# install it
cd dotfiles
bash bootstrap.sh
# done!
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;
</description>
        <pubDate>Mon, 23 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/23/dotfiles/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/23/dotfiles/presentation.html</guid>
        
        <category>dotfiles</category>
        
        <category>shell</category>
        
        <category>linux</category>
        
        <category>macos</category>
        
        
      </item>
    
      <item>
        <title>Writing a post or a presentation? Both!</title>
        <description>&lt;h1 id=&quot;post-or-slides&quot;&gt;Post or slides?&lt;/h1&gt;

&lt;p&gt;Presentations are great. Blogs too. Which one should do I dedicate my time to?&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;No need to choose, you can do &lt;strong&gt;both at once&lt;/strong&gt;!&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;In this special &lt;strong&gt;post/presentation&lt;/strong&gt;, I will give you an example with sources
on how to build your own blog posts, and generate both:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a post, and&lt;/li&gt;
&lt;li&gt;a presentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;from a single &lt;code&gt;markdown&lt;/code&gt; file.&lt;/p&gt;

&lt;!--more--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;first-part&quot;&gt;First part&lt;/h1&gt;

&lt;p&gt;This is an example of an horizontal slide.&lt;/p&gt;

&lt;p&gt;Text written here appears in both the presentation and the post layouts.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Press &lt;code&gt;ESC&lt;/code&gt; to navigate over all the slides.&lt;/p&gt;

&lt;p&gt;You can have text that will be ignored in the presentation, but written in the
post, so you can go more into details where it really matters.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;second-part&quot;&gt;Second part&lt;/h1&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-a&quot;&gt;Second part (A)&lt;/h2&gt;

&lt;p&gt;You can add a vertical slide (I personally use them for continuation of the upper slide).&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-b&quot;&gt;Second part B&lt;/h2&gt;

&lt;p&gt;Yet another one.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-c&quot;&gt;Second part C&lt;/h2&gt;

&lt;p&gt;Last one including a figure from &lt;code&gt;Gravizo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%201.%20Example%20of%20a%20figure%20using%20Gravizo;%0Ascale%20max%20900%20width;%0Arectangle%20MARKDOWN;%0Arectangle%20BLOG%20%7B;%0A%20%20rectangle%20POST;%0A%20%20rectangle%20PRESENTATION;%0A%7D;%0AMARKDOWN%20--%3E%20POST;%0AMARKDOWN%20--%3E%20PRESENTATION;%0Anote%20left%20of%20MARKDOWN:%20example;%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;Here you can find:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/presentation.html&quot;&gt;The generated presentation / slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/post.html&quot;&gt;The generated blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mauriciojost/mauriciojost.github.io/development/_posts/2017-10-10-covariant-contravariant-invariant-in-scala.markdown&quot;&gt;The source markgown file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll official page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot;&gt;Reveal.js official git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

&lt;p&gt;And &lt;a href=&quot;https://github.com/mauriciojost/mauriciojost.github.io&quot;&gt;star the project here&lt;/a&gt; if you liked it!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/post.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/post.html</guid>
        
        <category>reveal</category>
        
        <category>blog</category>
        
        <category>markdown</category>
        
        
      </item>
    
      <item>
        <title>Writing a post or a presentation? Both!</title>
        <description>&lt;h1 id=&quot;post-or-slides&quot;&gt;Post or slides?&lt;/h1&gt;

&lt;p&gt;Presentations are great. Blogs too. Which one should do I dedicate my time to?&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;No need to choose, you can do &lt;strong&gt;both at once&lt;/strong&gt;!&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;In this special &lt;strong&gt;post/presentation&lt;/strong&gt;, I will give you an example with sources
on how to build your own blog posts, and generate both:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a post, and&lt;/li&gt;
&lt;li&gt;a presentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;from a single &lt;code&gt;markdown&lt;/code&gt; file.&lt;/p&gt;

&lt;!--more--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;first-part&quot;&gt;First part&lt;/h1&gt;

&lt;p&gt;This is an example of an horizontal slide.&lt;/p&gt;

&lt;p&gt;Text written here appears in both the presentation and the post layouts.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Press &lt;code&gt;ESC&lt;/code&gt; to navigate over all the slides.&lt;/p&gt;

&lt;p&gt;You can have text that will be ignored in the presentation, but written in the
post, so you can go more into details where it really matters.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;second-part&quot;&gt;Second part&lt;/h1&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-a&quot;&gt;Second part (A)&lt;/h2&gt;

&lt;p&gt;You can add a vertical slide (I personally use them for continuation of the upper slide).&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-b&quot;&gt;Second part B&lt;/h2&gt;

&lt;p&gt;Yet another one.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-c&quot;&gt;Second part C&lt;/h2&gt;

&lt;p&gt;Last one including a figure from &lt;code&gt;Gravizo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%201.%20Example%20of%20a%20figure%20using%20Gravizo;%0Ascale%20max%20900%20width;%0Arectangle%20MARKDOWN;%0Arectangle%20BLOG%20%7B;%0A%20%20rectangle%20POST;%0A%20%20rectangle%20PRESENTATION;%0A%7D;%0AMARKDOWN%20--%3E%20POST;%0AMARKDOWN%20--%3E%20PRESENTATION;%0Anote%20left%20of%20MARKDOWN:%20example;%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;Here you can find:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/presentation.html&quot;&gt;The generated presentation / slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/post.html&quot;&gt;The generated blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mauriciojost/mauriciojost.github.io/development/_posts/2017-10-10-covariant-contravariant-invariant-in-scala.markdown&quot;&gt;The source markgown file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll official page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot;&gt;Reveal.js official git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

&lt;p&gt;And &lt;a href=&quot;https://github.com/mauriciojost/mauriciojost.github.io&quot;&gt;star the project here&lt;/a&gt; if you liked it!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/presentation.html</guid>
        
        <category>reveal</category>
        
        <category>blog</category>
        
        <category>markdown</category>
        
        
      </item>
    
      <item>
        <title>CoVariant, ContraVariant and InVariant... Variances in Scala</title>
        <description>&lt;h2 id=&quot;variance&quot;&gt;Variance&lt;/h2&gt;

&lt;p&gt;The variance in Scala aims to provide flexibility to the inheritance on parametric types.&lt;/p&gt;

&lt;p&gt;Two examples where it helps are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make &lt;code&gt;List[Dog]&lt;/code&gt; a subtype of &lt;code&gt;List[Animal]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reuse a function &lt;code&gt;Animal=&amp;gt;Boolean&lt;/code&gt; as a function &lt;code&gt;Dog=&amp;gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;a-concrete-example&quot;&gt;A concrete example&lt;/h3&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%201.%20Example%20types;%0Ascale%20max%20900%20width;%0AAnimal%20%3C%7C--%20Dog;%0AAnimal%20%3C%7C--%20Cat;%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// Our pet classes
sealed class Animal
class Dog extends Animal
class Cat extends Animal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;p&gt;Let&amp;#39;s say you work for a veterinary. You&amp;#39;re writing an API.&lt;/p&gt;

&lt;p&gt;You want to &lt;strong&gt;modularize the functions
that retrieve pets&amp;#39; information from a DB&lt;/strong&gt;, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getBreed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Then, we could define a class &lt;code&gt;Func&lt;/code&gt; that will encapsulate an
&lt;em&gt;information retriever&lt;/em&gt; function, &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is our first attempt:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;class Func[I,O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;p&gt;Good! We can define our first instance of &lt;code&gt;Func&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// Our first information retriever
// Is my animal a dog?
val isADog: Func[Animal, Boolean] = {
  new Func((i: Animal) =&amp;gt; i.isInstanceOf[Dog])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;p&gt;We say that &lt;strong&gt;&lt;em&gt;Fun&lt;/em&gt; is invariant in &lt;code&gt;I&lt;/code&gt; (&lt;code&gt;Animal&lt;/code&gt;) and invariant in &lt;code&gt;O&lt;/code&gt; (&lt;code&gt;Boolean&lt;/code&gt;)&lt;/strong&gt;, as there is not subtype association
done by the compiler.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;generalizing-func-covariance&quot;&gt;Generalizing &lt;code&gt;Func&lt;/code&gt;: Covariance&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s say you handle many &lt;code&gt;Func&lt;/code&gt; implementations:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val x:  Func[Animal, Boolean] = ...
val y:  Func[Animal, String] = ...
val z:  Func[Animal, Int] = ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;p&gt;It would be good to be able to treat all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; polymorphically.&lt;/p&gt;

&lt;p&gt;For instance be able to do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val l: List[Func[Animal, AnyVal]] =
   List(x, y, z) // won't work, invariance
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our initial declaration of &lt;code&gt;Func[I, O]&lt;/code&gt; was invariant in both &lt;code&gt;I&lt;/code&gt; and &lt;code&gt;O&lt;/code&gt;.
It &lt;strong&gt;does not allow this supertype relation&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;The solution is &lt;strong&gt;covariance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The principle: making &lt;code&gt;Clz&lt;/code&gt; covariant in &lt;code&gt;A&lt;/code&gt; means that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cat &amp;lt;: Animal&lt;/code&gt; implies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clz[Cat] &amp;lt;: Clz[Animal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words: the inheritance of this &lt;strong&gt;parametric&lt;/strong&gt; type follows the one from the &lt;strong&gt;parameter&lt;/strong&gt; type.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Back to our example, we simply re-define &lt;code&gt;Func&lt;/code&gt;, but making it covariant in &lt;code&gt;O&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// now covariant on O
class Func[I, +O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// specific type
val isADog: Func[Animal, Boolean] = ...

// generic type
val covIsDogForAnyVal: Func[Animal, AnyVal] =
        isADog   // assigned to a more general type
                 // works because
                 // Boolean &amp;lt;: AnyVal,
                 // and thanks to covariance
                 // Func[X, Boolean] &amp;lt;: Func[X, AnyVal]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;h2 id=&quot;specializing-func-contravariance&quot;&gt;Specializing &lt;code&gt;Func&lt;/code&gt;: Contravariance&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s say we have our function &lt;code&gt;Func[Animal, Boolean]&lt;/code&gt;. Given that &lt;code&gt;Dog &amp;lt;: Animal&lt;/code&gt; (&lt;code&gt;Dog&lt;/code&gt; is a subtype of &lt;code&gt;Animal&lt;/code&gt;),
it seems natural to be able to apply such function to a &lt;code&gt;Dog&lt;/code&gt; too.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;The solution is &lt;strong&gt;contravariance&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;The principle: making &lt;code&gt;Clz&lt;/code&gt; contravariant in &lt;code&gt;A&lt;/code&gt; means that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cat &amp;lt;: Animal&lt;/code&gt; implies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clz[Cat] &amp;gt;: Clz[Animal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words the inheritance of this parametric type follows
inversely the one from the parameter type.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;We simply redefine &lt;code&gt;Func&lt;/code&gt; but making it contravariant in &lt;code&gt;I&lt;/code&gt; this time:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// now contravariant in I
class Func[-I, O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// generic type
val isDog: Func[Animal, Boolean] =
        new Func((i: Animal) =&amp;gt; i.isInstanceOf[Dog])

// specific type
val contrvarIsDog: Func[Dog, Boolean] =
        isDog // assigned to a more specific type
              // works because
              // Dog &amp;lt;: Animal, and thanks
              // to contravariance
              // Func[Dog, X] &amp;gt;: Func[Animal, X]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;h2 id=&quot;use-in-the-scala-library&quot;&gt;Use in the Scala library&lt;/h2&gt;

&lt;p&gt;I invite you to take a look at the implementation of &lt;a href=&quot;https://github.com/scala/scala/blob/v2.12.3/src/library/scala/Function2.scala&quot;&gt;the trait Function2 in Scala v2.12&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See its declaration (ignore the &lt;code&gt;@specialized&lt;/code&gt; annotation):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;trait Function2[-T1, -T2, +R] extends ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What are the consequences of using covariance and contravariance?&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;For instance for the function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val f: Function2[Animal, Cat, Dog] = ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which of these casts are illegal?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val f1: Function2[Animal, Cat, Animal] = f
val f2: Function2[Dog, Cat, Dog] = f
val f3: Function2[Cat, Cat, Dog] = f
val f4: Function2[Animal, Cat, Animal] = f
val f5: Function2[Animal, Cat, Cat] = f
val f6: Function2[Animal, Dog, Dog] = f

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is the result of applying variances:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%202.%20Covariance%20and%20Contravariance;%0Ascale%20max%20900%20width;%0A%22List%5BAnimal%5D%22%20%3C%7C--%20%22List%5BDog%5D%22:%20%22Covariance%20%5B+A%5D%22;%0A%22List%5BAnimal%5D%22%20%3C%7C--%20%22List%5BCat%5D%22;%0A%22Funct%5BDog%5D%22%20%3C%7C--%20%22Funct%5BAnimal%5D%22:%20%22Contravariance%20%5B-A%5D%22;%0Anote%20left%20of%20%22Funct%5BAnimal%5D%22:%20When%20instanciated,%5Cncan%20be%20reused%5Cnas%20Funct%5BDog%5D%5Cnthanks%20to%5Cncontravariance;%0Anote%20right%20of%20%22List%5BDog%5D%22:%20Can%20be%20added%5Cnto%20a%20List%5BAnimal%5D%5Cnthanks%20to%5Cncovariance;%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&quot;https://docs.scala-lang.org/tour/variances.html&quot;&gt;official Scala documentation on variance&lt;/a&gt;.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/10/covariant-contravariant-invariant-in-scala/post.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/10/covariant-contravariant-invariant-in-scala/post.html</guid>
        
        <category>scala</category>
        
        <category>types</category>
        
        <category>covariant</category>
        
        <category>contravariant</category>
        
        <category>invariant</category>
        
        
      </item>
    
      <item>
        <title>CoVariant, ContraVariant and InVariant... Variances in Scala</title>
        <description>&lt;h2 id=&quot;variance&quot;&gt;Variance&lt;/h2&gt;

&lt;p&gt;The variance in Scala aims to provide flexibility to the inheritance on parametric types.&lt;/p&gt;

&lt;p&gt;Two examples where it helps are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make &lt;code&gt;List[Dog]&lt;/code&gt; a subtype of &lt;code&gt;List[Animal]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reuse a function &lt;code&gt;Animal=&amp;gt;Boolean&lt;/code&gt; as a function &lt;code&gt;Dog=&amp;gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;a-concrete-example&quot;&gt;A concrete example&lt;/h3&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%201.%20Example%20types;%0Ascale%20max%20900%20width;%0AAnimal%20%3C%7C--%20Dog;%0AAnimal%20%3C%7C--%20Cat;%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// Our pet classes
sealed class Animal
class Dog extends Animal
class Cat extends Animal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;p&gt;Let&amp;#39;s say you work for a veterinary. You&amp;#39;re writing an API.&lt;/p&gt;

&lt;p&gt;You want to &lt;strong&gt;modularize the functions
that retrieve pets&amp;#39; information from a DB&lt;/strong&gt;, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getBreed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Then, we could define a class &lt;code&gt;Func&lt;/code&gt; that will encapsulate an
&lt;em&gt;information retriever&lt;/em&gt; function, &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is our first attempt:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;class Func[I,O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;p&gt;Good! We can define our first instance of &lt;code&gt;Func&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// Our first information retriever
// Is my animal a dog?
val isADog: Func[Animal, Boolean] = {
  new Func((i: Animal) =&amp;gt; i.isInstanceOf[Dog])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;p&gt;We say that &lt;strong&gt;&lt;em&gt;Fun&lt;/em&gt; is invariant in &lt;code&gt;I&lt;/code&gt; (&lt;code&gt;Animal&lt;/code&gt;) and invariant in &lt;code&gt;O&lt;/code&gt; (&lt;code&gt;Boolean&lt;/code&gt;)&lt;/strong&gt;, as there is not subtype association
done by the compiler.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;generalizing-func-covariance&quot;&gt;Generalizing &lt;code&gt;Func&lt;/code&gt;: Covariance&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s say you handle many &lt;code&gt;Func&lt;/code&gt; implementations:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val x:  Func[Animal, Boolean] = ...
val y:  Func[Animal, String] = ...
val z:  Func[Animal, Int] = ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;p&gt;It would be good to be able to treat all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; polymorphically.&lt;/p&gt;

&lt;p&gt;For instance be able to do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val l: List[Func[Animal, AnyVal]] =
   List(x, y, z) // won't work, invariance
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our initial declaration of &lt;code&gt;Func[I, O]&lt;/code&gt; was invariant in both &lt;code&gt;I&lt;/code&gt; and &lt;code&gt;O&lt;/code&gt;.
It &lt;strong&gt;does not allow this supertype relation&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;The solution is &lt;strong&gt;covariance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The principle: making &lt;code&gt;Clz&lt;/code&gt; covariant in &lt;code&gt;A&lt;/code&gt; means that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cat &amp;lt;: Animal&lt;/code&gt; implies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clz[Cat] &amp;lt;: Clz[Animal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words: the inheritance of this &lt;strong&gt;parametric&lt;/strong&gt; type follows the one from the &lt;strong&gt;parameter&lt;/strong&gt; type.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Back to our example, we simply re-define &lt;code&gt;Func&lt;/code&gt;, but making it covariant in &lt;code&gt;O&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// now covariant on O
class Func[I, +O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// specific type
val isADog: Func[Animal, Boolean] = ...

// generic type
val covIsDogForAnyVal: Func[Animal, AnyVal] =
        isADog   // assigned to a more general type
                 // works because
                 // Boolean &amp;lt;: AnyVal,
                 // and thanks to covariance
                 // Func[X, Boolean] &amp;lt;: Func[X, AnyVal]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;h2 id=&quot;specializing-func-contravariance&quot;&gt;Specializing &lt;code&gt;Func&lt;/code&gt;: Contravariance&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s say we have our function &lt;code&gt;Func[Animal, Boolean]&lt;/code&gt;. Given that &lt;code&gt;Dog &amp;lt;: Animal&lt;/code&gt; (&lt;code&gt;Dog&lt;/code&gt; is a subtype of &lt;code&gt;Animal&lt;/code&gt;),
it seems natural to be able to apply such function to a &lt;code&gt;Dog&lt;/code&gt; too.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;The solution is &lt;strong&gt;contravariance&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;The principle: making &lt;code&gt;Clz&lt;/code&gt; contravariant in &lt;code&gt;A&lt;/code&gt; means that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cat &amp;lt;: Animal&lt;/code&gt; implies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clz[Cat] &amp;gt;: Clz[Animal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words the inheritance of this parametric type follows
inversely the one from the parameter type.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;We simply redefine &lt;code&gt;Func&lt;/code&gt; but making it contravariant in &lt;code&gt;I&lt;/code&gt; this time:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// now contravariant in I
class Func[-I, O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// generic type
val isDog: Func[Animal, Boolean] =
        new Func((i: Animal) =&amp;gt; i.isInstanceOf[Dog])

// specific type
val contrvarIsDog: Func[Dog, Boolean] =
        isDog // assigned to a more specific type
              // works because
              // Dog &amp;lt;: Animal, and thanks
              // to contravariance
              // Func[Dog, X] &amp;gt;: Func[Animal, X]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;h2 id=&quot;use-in-the-scala-library&quot;&gt;Use in the Scala library&lt;/h2&gt;

&lt;p&gt;I invite you to take a look at the implementation of &lt;a href=&quot;https://github.com/scala/scala/blob/v2.12.3/src/library/scala/Function2.scala&quot;&gt;the trait Function2 in Scala v2.12&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See its declaration (ignore the &lt;code&gt;@specialized&lt;/code&gt; annotation):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;trait Function2[-T1, -T2, +R] extends ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What are the consequences of using covariance and contravariance?&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;For instance for the function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val f: Function2[Animal, Cat, Dog] = ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which of these casts are illegal?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val f1: Function2[Animal, Cat, Animal] = f
val f2: Function2[Dog, Cat, Dog] = f
val f3: Function2[Cat, Cat, Dog] = f
val f4: Function2[Animal, Cat, Animal] = f
val f5: Function2[Animal, Cat, Cat] = f
val f6: Function2[Animal, Dog, Dog] = f

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is the result of applying variances:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%202.%20Covariance%20and%20Contravariance;%0Ascale%20max%20900%20width;%0A%22List%5BAnimal%5D%22%20%3C%7C--%20%22List%5BDog%5D%22:%20%22Covariance%20%5B+A%5D%22;%0A%22List%5BAnimal%5D%22%20%3C%7C--%20%22List%5BCat%5D%22;%0A%22Funct%5BDog%5D%22%20%3C%7C--%20%22Funct%5BAnimal%5D%22:%20%22Contravariance%20%5B-A%5D%22;%0Anote%20left%20of%20%22Funct%5BAnimal%5D%22:%20When%20instanciated,%5Cncan%20be%20reused%5Cnas%20Funct%5BDog%5D%5Cnthanks%20to%5Cncontravariance;%0Anote%20right%20of%20%22List%5BDog%5D%22:%20Can%20be%20added%5Cnto%20a%20List%5BAnimal%5D%5Cnthanks%20to%5Cncovariance;%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&quot;https://docs.scala-lang.org/tour/variances.html&quot;&gt;official Scala documentation on variance&lt;/a&gt;.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/10/covariant-contravariant-invariant-in-scala/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/10/covariant-contravariant-invariant-in-scala/presentation.html</guid>
        
        <category>scala</category>
        
        <category>types</category>
        
        <category>covariant</category>
        
        <category>contravariant</category>
        
        <category>invariant</category>
        
        
      </item>
    
      <item>
        <title>JVM Memory Spaces</title>
        <description>&lt;p&gt;This post is about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what &lt;strong&gt;Java Memory Spaces&lt;/strong&gt; are&lt;/li&gt;
&lt;li&gt;why they are such a good idea&lt;/li&gt;
&lt;li&gt;the spaces and their use in the JVM&lt;/li&gt;
&lt;li&gt;how to measure their usage in practice&lt;/li&gt;
&lt;li&gt;where to find more documentation about them&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;It will help you better understand concepts like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OutOfMemoryError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PermGen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heap memory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;why-the-need-for-memory-spaces&quot;&gt;Why the need for Memory Spaces?&lt;/h2&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;The JVM frees unreferenced memory via an entity called Garbage Collector (or GC for short).
Every time the GC claims memory, it executes these steps:&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%201.%20The%20steps%20of%20the%20Garbage%20Collection%20(GC);%0Ascale%20max%20900%20width;%0A;%0A(*)%20-right-%3E%20%221.%20Mark%20used%20memory%22%20%23white;%0A-right-%3E%20%222.%20Delete%20unused%20memory%22%20%23white;%0A-right-%3E%20%223.%20Compact%20used%20memory%22%20%23white;%0A-right-%3E%20(*);%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;If these steps were to be applied to a flat memory space, the process of freeing memory would become
proportionally as slow as the amount of memory used. In other words, the more classes loaded, the more
memory segments to explore every time memory is claimed.&lt;/p&gt;

&lt;p&gt;As you could imagine, things get better if the GC is aware of the odds an object is eligible for disposal.&lt;/p&gt;

&lt;p&gt;In a simplified version of reality, the GC considers a class object to be permanent (as it will probably
live as long as the JVM).&lt;/p&gt;

&lt;p&gt;On the other hand, the GC considers objects created with the &lt;em&gt;new&lt;/em&gt; keyword as
more likely to have shorter life. The GC discriminates &lt;em&gt;very short life&lt;/em&gt; from &lt;em&gt;medium life&lt;/em&gt; and &lt;em&gt;long life&lt;/em&gt;
by keeping count of the amount of times an object survived a GC cycle. Objects survive a GC cycle when they
are still referenced (hence their block of memory is marked, preventing it from disposal).&lt;/p&gt;

&lt;p&gt;Objects that survived some GC cycles are less eligible for disposal soon, and we can say they change
their &lt;em&gt;generation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This categorisation of objects into generations really exists, and is materialised in JVMs via Memory Spaces,
or more precisely &lt;em&gt;Generational Memory Spaces&lt;/em&gt;.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;what-are-the-memory-spaces-in-java&quot;&gt;What are the Memory Spaces in Java?&lt;/h2&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Strictly speaking, the Java Memory Spaces really depend on the Java VM implementation, but in general
terms they can be divided into:&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%202.%20Java%20Memory%20Spaces%20(MP%20stands%20for%20Memory%20Pool);%0Ascale%20max%20900%20width;%0Arectangle%20%22JVM%20Memory%22%20%7B;%0A%20%20rectangle%20%22Heap%22%20%7B;%0A%20%20%20%20rectangle%20%22Young%5CnGeneration%22%20%7B;%0A%20%20%20%20%20%20rectangle%20eden%20as%20%22MP%20PS%5CnEden%5CnSpace%22%20%23red;%0A%20%20%20%20%20%20rectangle%20survivor%20as%20%22MP%20PS%5CnSurvivor%5CnSpace%22%20%23orange;%0A%20%20%20%20%7D;%0A%20%20%20%20rectangle%20%22Old%5CnGeneration%22%20%7B;%0A%20%20%20%20%20%20rectangle%20oldgen%20as%20%22MP%20PS%5CnOld%20Gen%22%20%23blue;%0A%20%20%20%20%7D;%0A%20%20%7D;%0A%20%20rectangle%20OffHeap%20%7B;%0A%20%20%20%20rectangle%20metaspace%20as%20%22MP%5CnMetaspace%22;%0A%20%20%20%20rectangle%20codecache%20as%20%22MP%5CnCodecache%22;%0A%20%20%20%20rectangle%20classspace%20as%20%22MP%5CnCompressed%5CnClass%20Space%22;%0A%20%20%7D;%0A%7D;%0Anote%20right%20of%20OffHeap%20%23white;%0A%20%20Not%20subject%20to%20GC.;%0Aend%20note;%0A;%0Anote%20right%20of%20Heap%20%23white;%0A%20%20All%20object%20instances;%0A%20%20are%20stored%20here,;%0A%20%20memory%20from%20this;%0A%20%20space%20is%20used%20whenever;%0A%20%20new%20is%20present%20in%20the;%0A%20%20code.;%0A%20%20Subject%20to%20GC.;%0Aend%20note;%0A;%0Anote%20right%20of%20metaspace%20%23white;%0A%20%20It%20used%20to%20be;%0A%20%20PermGen%20before;%0A%20%20Java%208.;%0Aend%20note;%0A;%0Anote%20right%20of%20codecache%20%23white;%0A%20%20Contains%20compiled;%0A%20%20native%20code,%20mostly;%0A%20%20used%20by%20the%20JIT.;%0Aend%20note;%0A;%0Anote%20right%20of%20eden%20%23white;%0A%20%20%20Recently%20allocated;%0A%20%20%20objects,%20did%20not;%0A%20%20%20survive%20any%20GC%20yet.;%0Aend%20note;%0A;%0Anote%20right%20of%20survivor%20%23white;%0A%20%20%20Objects%20that%20have;%0A%20%20%20survived%20at%20least;%0A%20%20%20one%20GC.;%0Aend%20note;%0A;%0Anote%20right%20of%20oldgen%20%23white;%0A%20%20Also%20called%20Tenured,;%0A%20%20objects%20that%20have;%0A%20%20survived%20some%20time;%0A%20%20in%20the%20Survivor%20Space.;%0Aend%20note;%0A;%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;no-permgen-space-in-jdk-8&quot;&gt;No PermGen Space in JDK 8?&lt;/h3&gt;

&lt;p&gt;Exactly, no more &lt;code&gt;PermGen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In JDK 8 the permanent generation was removed. The class metadata is allocated in native memory instead.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;The amount of native memory that can be used for class metadata is by default unlimited. You can use the option &lt;code&gt;MaxMetaspaceSize&lt;/code&gt; to put an upper limit on it.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;in-practice-can-i-measure-the-use-of-memory-spaces&quot;&gt;In practice, can I measure the use of Memory Spaces?&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;jconsole&lt;/code&gt; for that. This tool will show you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the use of Memory Spaces&lt;/li&gt;
&lt;li&gt;the threads in your JVM (with name, status, stacktrace, etc.)&lt;/li&gt;
&lt;li&gt;loaded classes&lt;/li&gt;
&lt;li&gt;exposed MBeans&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;We will use the Scala REPL as an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;scala
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will open &lt;code&gt;jconsole&lt;/code&gt; and hook to the just launched JVM (using its PID).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jconsole &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to hook to the corresponding JVM.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;What I see initially is:&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/jconsole1.png&quot; style=&quot;width:800px;height:600px;&quot;&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;However, if you perform a GC and then you create lots of objects with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val a = (1 to 1000000).toList.map(_.toString)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;You will see:&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/jconsole2.png&quot; style=&quot;width:800px;height:600px;&quot;&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Can you explain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what happens to the &lt;em&gt;Heap Memory Usage&lt;/em&gt; when we launched the GC? It drops, used memory was marked, letting GC dispose unused blocks of memory, freing it for new objects to use it.&lt;/li&gt;
&lt;li&gt;what happens when we created objects in Scala? See how the heap usage increases by about 100MiB. There is one new big object &lt;code&gt;val a&lt;/code&gt; allocated.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;And more generally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what happens to the Loaded classes? They increased by the team &lt;code&gt;val a&lt;/code&gt; was instantiated given the lazy class loading.&lt;/li&gt;
&lt;li&gt;what happens to the use of CPU? There is a peak when &lt;code&gt;val a&lt;/code&gt; was instantiated. Can you see it?&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;There is really lots of documentation about this topic. Whenever you read documentation about it, I suggest you to
double check the version of the JVM it relates too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/en/java/&quot;&gt;General documentation from Oracle about Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html&quot;&gt;Java Garbage Collection Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/&quot;&gt;JAVA SE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/&quot;&gt;JAVA SE 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/9/&quot;&gt;JAVA SE 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Also, do not forget &lt;code&gt;man java&lt;/code&gt;. If java was not installed properly via a package manager, you can still try to read the manual with &lt;code&gt;man&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;man --manpath /home/mjost/opt/zips/jdk1.7.0_79/man java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Aug 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/08/17/jvm-memory-spaces/post.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/08/17/jvm-memory-spaces/post.html</guid>
        
        <category>scala</category>
        
        <category>java</category>
        
        <category>heap</category>
        
        <category>memory</category>
        
        <category>permgen</category>
        
        
      </item>
    
      <item>
        <title>JVM Memory Spaces</title>
        <description>&lt;p&gt;This post is about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what &lt;strong&gt;Java Memory Spaces&lt;/strong&gt; are&lt;/li&gt;
&lt;li&gt;why they are such a good idea&lt;/li&gt;
&lt;li&gt;the spaces and their use in the JVM&lt;/li&gt;
&lt;li&gt;how to measure their usage in practice&lt;/li&gt;
&lt;li&gt;where to find more documentation about them&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;It will help you better understand concepts like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OutOfMemoryError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PermGen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heap memory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;why-the-need-for-memory-spaces&quot;&gt;Why the need for Memory Spaces?&lt;/h2&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;The JVM frees unreferenced memory via an entity called Garbage Collector (or GC for short).
Every time the GC claims memory, it executes these steps:&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%201.%20The%20steps%20of%20the%20Garbage%20Collection%20(GC);%0Ascale%20max%20900%20width;%0A;%0A(*)%20-right-%3E%20%221.%20Mark%20used%20memory%22%20%23white;%0A-right-%3E%20%222.%20Delete%20unused%20memory%22%20%23white;%0A-right-%3E%20%223.%20Compact%20used%20memory%22%20%23white;%0A-right-%3E%20(*);%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;If these steps were to be applied to a flat memory space, the process of freeing memory would become
proportionally as slow as the amount of memory used. In other words, the more classes loaded, the more
memory segments to explore every time memory is claimed.&lt;/p&gt;

&lt;p&gt;As you could imagine, things get better if the GC is aware of the odds an object is eligible for disposal.&lt;/p&gt;

&lt;p&gt;In a simplified version of reality, the GC considers a class object to be permanent (as it will probably
live as long as the JVM).&lt;/p&gt;

&lt;p&gt;On the other hand, the GC considers objects created with the &lt;em&gt;new&lt;/em&gt; keyword as
more likely to have shorter life. The GC discriminates &lt;em&gt;very short life&lt;/em&gt; from &lt;em&gt;medium life&lt;/em&gt; and &lt;em&gt;long life&lt;/em&gt;
by keeping count of the amount of times an object survived a GC cycle. Objects survive a GC cycle when they
are still referenced (hence their block of memory is marked, preventing it from disposal).&lt;/p&gt;

&lt;p&gt;Objects that survived some GC cycles are less eligible for disposal soon, and we can say they change
their &lt;em&gt;generation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This categorisation of objects into generations really exists, and is materialised in JVMs via Memory Spaces,
or more precisely &lt;em&gt;Generational Memory Spaces&lt;/em&gt;.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;what-are-the-memory-spaces-in-java&quot;&gt;What are the Memory Spaces in Java?&lt;/h2&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Strictly speaking, the Java Memory Spaces really depend on the Java VM implementation, but in general
terms they can be divided into:&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;&lt;img src=&quot;https://g.gravizo.com/svg?%0A@startuml;%0Askinparam%20monochrome%20false;%0Acaption%20Figure%202.%20Java%20Memory%20Spaces%20(MP%20stands%20for%20Memory%20Pool);%0Ascale%20max%20900%20width;%0Arectangle%20%22JVM%20Memory%22%20%7B;%0A%20%20rectangle%20%22Heap%22%20%7B;%0A%20%20%20%20rectangle%20%22Young%5CnGeneration%22%20%7B;%0A%20%20%20%20%20%20rectangle%20eden%20as%20%22MP%20PS%5CnEden%5CnSpace%22%20%23red;%0A%20%20%20%20%20%20rectangle%20survivor%20as%20%22MP%20PS%5CnSurvivor%5CnSpace%22%20%23orange;%0A%20%20%20%20%7D;%0A%20%20%20%20rectangle%20%22Old%5CnGeneration%22%20%7B;%0A%20%20%20%20%20%20rectangle%20oldgen%20as%20%22MP%20PS%5CnOld%20Gen%22%20%23blue;%0A%20%20%20%20%7D;%0A%20%20%7D;%0A%20%20rectangle%20OffHeap%20%7B;%0A%20%20%20%20rectangle%20metaspace%20as%20%22MP%5CnMetaspace%22;%0A%20%20%20%20rectangle%20codecache%20as%20%22MP%5CnCodecache%22;%0A%20%20%20%20rectangle%20classspace%20as%20%22MP%5CnCompressed%5CnClass%20Space%22;%0A%20%20%7D;%0A%7D;%0Anote%20right%20of%20OffHeap%20%23white;%0A%20%20Not%20subject%20to%20GC.;%0Aend%20note;%0A;%0Anote%20right%20of%20Heap%20%23white;%0A%20%20All%20object%20instances;%0A%20%20are%20stored%20here,;%0A%20%20memory%20from%20this;%0A%20%20space%20is%20used%20whenever;%0A%20%20new%20is%20present%20in%20the;%0A%20%20code.;%0A%20%20Subject%20to%20GC.;%0Aend%20note;%0A;%0Anote%20right%20of%20metaspace%20%23white;%0A%20%20It%20used%20to%20be;%0A%20%20PermGen%20before;%0A%20%20Java%208.;%0Aend%20note;%0A;%0Anote%20right%20of%20codecache%20%23white;%0A%20%20Contains%20compiled;%0A%20%20native%20code,%20mostly;%0A%20%20used%20by%20the%20JIT.;%0Aend%20note;%0A;%0Anote%20right%20of%20eden%20%23white;%0A%20%20%20Recently%20allocated;%0A%20%20%20objects,%20did%20not;%0A%20%20%20survive%20any%20GC%20yet.;%0Aend%20note;%0A;%0Anote%20right%20of%20survivor%20%23white;%0A%20%20%20Objects%20that%20have;%0A%20%20%20survived%20at%20least;%0A%20%20%20one%20GC.;%0Aend%20note;%0A;%0Anote%20right%20of%20oldgen%20%23white;%0A%20%20Also%20called%20Tenured,;%0A%20%20objects%20that%20have;%0A%20%20survived%20some%20time;%0A%20%20in%20the%20Survivor%20Space.;%0Aend%20note;%0A;%0A@enduml;&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;no-permgen-space-in-jdk-8&quot;&gt;No PermGen Space in JDK 8?&lt;/h3&gt;

&lt;p&gt;Exactly, no more &lt;code&gt;PermGen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In JDK 8 the permanent generation was removed. The class metadata is allocated in native memory instead.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;The amount of native memory that can be used for class metadata is by default unlimited. You can use the option &lt;code&gt;MaxMetaspaceSize&lt;/code&gt; to put an upper limit on it.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;in-practice-can-i-measure-the-use-of-memory-spaces&quot;&gt;In practice, can I measure the use of Memory Spaces?&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;jconsole&lt;/code&gt; for that. This tool will show you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the use of Memory Spaces&lt;/li&gt;
&lt;li&gt;the threads in your JVM (with name, status, stacktrace, etc.)&lt;/li&gt;
&lt;li&gt;loaded classes&lt;/li&gt;
&lt;li&gt;exposed MBeans&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;We will use the Scala REPL as an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;scala
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will open &lt;code&gt;jconsole&lt;/code&gt; and hook to the just launched JVM (using its PID).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jconsole &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to hook to the corresponding JVM.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;What I see initially is:&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/jconsole1.png&quot; style=&quot;width:800px;height:600px;&quot;&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;However, if you perform a GC and then you create lots of objects with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;val a = (1 to 1000000).toList.map(_.toString)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-down--&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;You will see:&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/jconsole2.png&quot; style=&quot;width:800px;height:600px;&quot;&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Can you explain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what happens to the &lt;em&gt;Heap Memory Usage&lt;/em&gt; when we launched the GC? It drops, used memory was marked, letting GC dispose unused blocks of memory, freing it for new objects to use it.&lt;/li&gt;
&lt;li&gt;what happens when we created objects in Scala? See how the heap usage increases by about 100MiB. There is one new big object &lt;code&gt;val a&lt;/code&gt; allocated.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;And more generally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what happens to the Loaded classes? They increased by the team &lt;code&gt;val a&lt;/code&gt; was instantiated given the lazy class loading.&lt;/li&gt;
&lt;li&gt;what happens to the use of CPU? There is a peak when &lt;code&gt;val a&lt;/code&gt; was instantiated. Can you see it?&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;There is really lots of documentation about this topic. Whenever you read documentation about it, I suggest you to
double check the version of the JVM it relates too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/en/java/&quot;&gt;General documentation from Oracle about Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html&quot;&gt;Java Garbage Collection Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/&quot;&gt;JAVA SE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/&quot;&gt;JAVA SE 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/9/&quot;&gt;JAVA SE 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Also, do not forget &lt;code&gt;man java&lt;/code&gt;. If java was not installed properly via a package manager, you can still try to read the manual with &lt;code&gt;man&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;man --manpath /home/mjost/opt/zips/jdk1.7.0_79/man java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--slide-next--&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Aug 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/08/17/jvm-memory-spaces/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/08/17/jvm-memory-spaces/presentation.html</guid>
        
        <category>scala</category>
        
        <category>java</category>
        
        <category>heap</category>
        
        <category>memory</category>
        
        <category>permgen</category>
        
        
      </item>
    
      <item>
        <title>Measuring the Performance of Anything In Scala</title>
        <description>&lt;h2 id=&quot;why-benchmarking&quot;&gt;Why benchmarking?&lt;/h2&gt;

&lt;p&gt;Coding consciously and the use of code reviews are of great importance when it comes to writing clean and efficient code. Sometimes however, I feel like I need stronger reasons to go one way or another, specially when I don&amp;#39;t really know what is happening under the JVM hood.&lt;/p&gt;

&lt;p&gt;A benchmark helps describing the current status of your implementation. It provides awareness, helps deciding if improvement is worth the investment, and finally helps measuring the improvement of your change (if any). &lt;/p&gt;

&lt;p&gt;Unfortunately getting such number is not so easy, but fortunately there are good tools to do it correctly. Keep reading if you&amp;#39;re interested.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-is-the-problem-with-benchmarking&quot;&gt;What is the problem with benchmarking?&lt;/h2&gt;

&lt;p&gt;With benchmarking we can determine the performance of an algorithm. However getting meaningful data is tricky.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What can be so complicated about it? Just launch the algorithm many times and measure its execution time, and voila!!!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nope, benchmarking is not so trivial, specially on top of JVM. Scala by itself applies more than 
&lt;a href=&quot;https://wiki.scala-lang.org/display/SIW/Overview+of+Compiler+Phases&quot;&gt;15 phases&lt;/a&gt; when 
compiling trying to optimize the algorithm, and the JVM can also apply very clever optimizations at run time, leading to a fooled conclusion.&lt;/p&gt;

&lt;p&gt;For instance, try to explain why the comparative benchmark set
&lt;a href=&quot;https://mauriciojost.github.io/scala-benchmark/&quot;&gt;org.mauritania.minibenchmark.catalog.IdentityTricky&lt;/a&gt; 
below (the suspiciously even one) yields such unexpected results for 
&lt;a href=&quot;https://github.com/mauriciojost/scala-benchmark/blob/master/src/main/scala/org/mauritania/minibenchmark/catalog/IdentityTricky.scala&quot;&gt;these very different algorithms&lt;/a&gt;. 
Found the reason?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mauriciojost.github.io/scala-benchmark/&quot;&gt;&lt;img src=&quot;/images/posts/scala-benchmark.png&quot; alt=&quot;Project&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;and-the-solution&quot;&gt;And the solution?&lt;/h2&gt;

&lt;p&gt;The one I recommend is to use &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt;, the harness for Java benchmarking that is exploitable from Scala thanks to &lt;a href=&quot;https://github.com/ktoso/sbt-jmh&quot;&gt;sbt-jmh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also &lt;a href=&quot;https://scalameter.github.io/&quot;&gt;ScalaMeter&lt;/a&gt; that should be taken into account, I haven&amp;#39;t personally used it yet at the moment of writing this post. &lt;/p&gt;

&lt;h2 id=&quot;how-to-get-started-right-now&quot;&gt;How to get started right now?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I&amp;#39;ve set up a &lt;a href=&quot;https://github.com/mauriciojost/scala-benchmark&quot;&gt;project github/scala-benchmark&lt;/a&gt; which 
renders &lt;a href=&quot;https://mauriciojost.github.io/scala-benchmark/&quot;&gt;visual reports&lt;/a&gt; that GitHub can display via GitHub pages.&lt;/strong&gt; 
Help yourself and fork it if you like the idea.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Also if you want to know more, I really recommend &lt;a href=&quot;http://tutorials.jenkov.com/java-performance/jmh.html&quot;&gt;this read about JMH&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;
</description>
        <pubDate>Wed, 19 Apr 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/04/19/benchmarking-in-scala.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/04/19/benchmarking-in-scala.html</guid>
        
        <category>scala</category>
        
        <category>performance</category>
        
        <category>benchmark</category>
        
        <category>api</category>
        
        <category>collections</category>
        
        <category>jmh</category>
        
        
      </item>
    
  </channel>
</rss>
