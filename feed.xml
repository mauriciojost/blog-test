<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mauricio Jost</title>
    <description></description>
    <link>http://mauriciojost.github.io/</link>
    <atom:link href="http://mauriciojost.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 02 May 2020 12:02:37 +0200</pubDate>
    <lastBuildDate>Sat, 02 May 2020 12:02:37 +0200</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Arduino: Finally getting started</title>
        <description>&lt;nav&gt;
  &lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino&quot; id=&quot;markdown-toc-arduino&quot;&gt;Arduino&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#overview&quot; id=&quot;markdown-toc-overview&quot;&gt;Overview&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#what-is-it&quot; id=&quot;markdown-toc-what-is-it&quot;&gt;What is it?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#its-uses&quot; id=&quot;markdown-toc-its-uses&quot;&gt;Its uses?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#arduino-vs-raspberry&quot; id=&quot;markdown-toc-arduino-vs-raspberry&quot;&gt;Arduino vs. Raspberry?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#arduino-vs-&quot; id=&quot;markdown-toc-arduino-vs-&quot;&gt;Arduino vs. *?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-so-trendy&quot; id=&quot;markdown-toc-why-so-trendy&quot;&gt;Why so trendy?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-get-started&quot; id=&quot;markdown-toc-how-to-get-started&quot;&gt;How to get started?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#main-ingredients&quot; id=&quot;markdown-toc-main-ingredients&quot;&gt;Main ingredients&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#procedure&quot; id=&quot;markdown-toc-procedure&quot;&gt;Procedure&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#in-my-pipeline&quot; id=&quot;markdown-toc-in-my-pipeline&quot;&gt;In my pipeline&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#thanks&quot; id=&quot;markdown-toc-thanks&quot;&gt;Thanks!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;!--slide-down--&gt;

&lt;h1 id=&quot;arduino&quot;&gt;Arduino&lt;/h1&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;I always wanted to write a post with some sort of help for those curious about the fascinating world of Arduino. Here it is. Finally my getting started guide.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Please, stay only if…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you’re &lt;strong&gt;curious&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;you’re looking for &lt;strong&gt;new hobbies&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;you have some &lt;strong&gt;programming skills&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;you’re at &lt;strong&gt;no risk of divorce&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;A &lt;strong&gt;real disclaimer&lt;/strong&gt;, arduino is a time sucker, same level as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3D printing,&lt;/li&gt;
  &lt;li&gt;video games,&lt;/li&gt;
  &lt;li&gt;aeromodelling,&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Be careful&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h3&gt;

&lt;p&gt;Arduino is a &lt;strong&gt;company and a community&lt;/strong&gt; that designs and manufactures &lt;strong&gt;single-board microcontrollers&lt;/strong&gt; and microcontroller kits for building &lt;strong&gt;digital devices&lt;/strong&gt; &amp;lt;&lt;em&gt;with the &lt;strong&gt;framework to program them&lt;/strong&gt;&lt;/em&gt;&amp;gt;.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;its-uses&quot;&gt;Its uses?&lt;/h3&gt;

&lt;p&gt;Mostly pocket-sized devices with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A specific purpose (&lt;em&gt;embedded system&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;A minimalistic or no user interface&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;High&lt;/em&gt; power efficiency&lt;/li&gt;
  &lt;li&gt;Need for portability&lt;/li&gt;
  &lt;li&gt;Low price&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;No Operating System&lt;/em&gt; needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOTE: For those more into it already, keep in mind that all the items above are indicative. Sure you can have an arduino with 3 simple purposes, the user interface could be a color LCD still, maybe not efficient if you use no sleep features, no portability if you have a automatic window opening system, price can vary if you have a very expensive sensor, there are some so called operating systems for Arduino like Mongoose OS, …&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;arduino-vs-raspberry&quot;&gt;Arduino vs. Raspberry?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Also a pocket-size board&lt;/li&gt;
  &lt;li&gt;It’s a full computer though&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Has an Operating System&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;More expensive than most Arduino boards (~30€ the cheapest on &lt;a href=&quot;https://www.amazon.fr/Raspberry-Plaque-mod%C3%A8le-Cortex-11811853/dp/B07KKBCXLY/ref=sr_1_3?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;amp;dchild=1&amp;amp;keywords=raspberry+pi&amp;amp;qid=1588318997&amp;amp;sr=8-3&quot;&gt;amazon.fr&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;could last a day&lt;/strong&gt; on batteries (maximum)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OUT OF SCOPE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NOTE: Saw some videos making a big deal out of a Raspberry running on batteries for 14 hours.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;arduino-vs-&quot;&gt;Arduino vs. *?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;FPGA&lt;/li&gt;
  &lt;li&gt;ESPuma&lt;/li&gt;
  &lt;li&gt;uPython&lt;/li&gt;
  &lt;li&gt;Blynk&lt;/li&gt;
  &lt;li&gt;Mongoose OS&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OUT OF SCOPE&lt;/strong&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;why-so-trendy&quot;&gt;Why so trendy?&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;Boards can be way cheaper than a laptop&lt;/li&gt;
  &lt;li&gt;Lots of cool applications (IoT)
    &lt;ul&gt;
      &lt;li&gt;Smart Home&lt;/li&gt;
      &lt;li&gt;Smart City&lt;/li&gt;
      &lt;li&gt;Environment&lt;/li&gt;
      &lt;li&gt;Security&lt;/li&gt;
      &lt;li&gt;Industrial IoT&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;Wider scope than just programming&lt;/li&gt;
  &lt;li&gt;Interact with the real world / physics
    &lt;ul&gt;
      &lt;li&gt;Actuators&lt;/li&gt;
      &lt;li&gt;Sensors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build something useful&lt;/li&gt;
  &lt;li&gt;Be creative&lt;/li&gt;
  &lt;li&gt;Think out of the box&lt;/li&gt;
  &lt;li&gt;Have fun&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;how-to-get-started&quot;&gt;How to get started?&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;main-ingredients&quot;&gt;Main ingredients&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;An arduino-compatible board&lt;/li&gt;
  &lt;li&gt;Some sensor/s&lt;/li&gt;
  &lt;li&gt;Some user interface/s&lt;/li&gt;
  &lt;li&gt;A power supply&lt;/li&gt;
  &lt;li&gt;A firmware&lt;/li&gt;
&lt;/ol&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Proposed ingredients (&lt;strong&gt;to buy&lt;/strong&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Board: &lt;a href=&quot;https://www.amazon.fr/Yizhet-NodeMCU-ESP8266-ESP-12E-D%C3%A9veloppement/dp/B07XJWK5F4/ref=sr_1_3?dchild=1&amp;amp;keywords=ESP8266+nodeMCU&amp;amp;qid=1588339084&amp;amp;sr=8-3&quot;&gt;&lt;strong&gt;NodeMCU esp8266&lt;/strong&gt; (~5€)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sensor: &lt;a href=&quot;https://www.amazon.fr/dp/B07DPSMRJ6/ref=cm_sw_em_r_mt_&quot;&gt;&lt;strong&gt;a button&lt;/strong&gt; (~3€ each)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;UI: &lt;a href=&quot;https://www.amazon.fr/dp/B07PR5T67K/ref=cm_sw_em_r_mt_dp_U_NncREbE6NZ3Q3&quot;&gt;&lt;strong&gt;some leds&lt;/strong&gt; (~3€)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Power: laptop &lt;a href=&quot;https://www.amazon.fr/dp/B0711PVX6Z/ref=cm_sw_em_r_mt_&quot;&gt;(+ &lt;strong&gt;an usb cable&lt;/strong&gt; (~3€))&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Firmware: &lt;a href=&quot;https://github.com/mauriciojost/esp8266-blinking-led&quot;&gt;blinking led&lt;/a&gt; using &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;The component aboves are not the cheapest, but the simplest to get started with!!!&lt;/em&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h3 id=&quot;procedure&quot;&gt;Procedure&lt;/h3&gt;

&lt;!--slide-down--&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://docs.platformio.org/en/latest/core/installation.html&quot;&gt;PlatformIO Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;(opt.) Install the &lt;a href=&quot;https://platformio.org/platformio-ide&quot;&gt;PlatformIO IDE&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--slide-down--&gt;

&lt;ol&gt;
  &lt;li&gt;Connect your laptop to the &lt;strong&gt;NodeMCU esp8266&lt;/strong&gt; using the &lt;strong&gt;usb cable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Clone the &lt;a href=&quot;https://github.com/mauriciojost/esp8266-blinking-led&quot;&gt;blinking led&lt;/a&gt; project&lt;/li&gt;
  &lt;li&gt;Connect the leds to the board as described in &lt;a href=&quot;https://github.com/mauriciojost/esp8266-blinking-led/blob/master/src/Pinout.h&quot;&gt;the Pinout.h header&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Launch &lt;code class=&quot;highlighter-rouge&quot;&gt;platformio run --target upload&lt;/code&gt; to load firmware&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;That’s it!&lt;/strong&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;in-my-pipeline&quot;&gt;In my pipeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Framework to facilitate
    &lt;ul&gt;
      &lt;li&gt;Properties setup&lt;/li&gt;
      &lt;li&gt;Development&lt;/li&gt;
      &lt;li&gt;Logs retrieval&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Projects
    &lt;ul&gt;
      &lt;li&gt;Botino&lt;/li&gt;
      &lt;li&gt;Sleepino&lt;/li&gt;
      &lt;li&gt;Bimbino (proto ready)&lt;/li&gt;
      &lt;li&gt;Zino (to come)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks!&lt;/h2&gt;

</description>
        <pubDate>Thu, 30 Apr 2020 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2020/04/30/arduino-finally-getting-started/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2020/04/30/arduino-finally-getting-started/presentation.html</guid>
        
        <category>arduino</category>
        
        <category>newbie</category>
        
        <category>esp8266</category>
        
        
      </item>
    
      <item>
        <title>Arduino: Finally getting started</title>
        <description>&lt;nav&gt;
  &lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino&quot; id=&quot;markdown-toc-arduino&quot;&gt;Arduino&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#overview&quot; id=&quot;markdown-toc-overview&quot;&gt;Overview&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#what-is-it&quot; id=&quot;markdown-toc-what-is-it&quot;&gt;What is it?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#its-uses&quot; id=&quot;markdown-toc-its-uses&quot;&gt;Its uses?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#arduino-vs-raspberry&quot; id=&quot;markdown-toc-arduino-vs-raspberry&quot;&gt;Arduino vs. Raspberry?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#arduino-vs-&quot; id=&quot;markdown-toc-arduino-vs-&quot;&gt;Arduino vs. *?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-so-trendy&quot; id=&quot;markdown-toc-why-so-trendy&quot;&gt;Why so trendy?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-get-started&quot; id=&quot;markdown-toc-how-to-get-started&quot;&gt;How to get started?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#main-ingredients&quot; id=&quot;markdown-toc-main-ingredients&quot;&gt;Main ingredients&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#procedure&quot; id=&quot;markdown-toc-procedure&quot;&gt;Procedure&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#in-my-pipeline&quot; id=&quot;markdown-toc-in-my-pipeline&quot;&gt;In my pipeline&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#thanks&quot; id=&quot;markdown-toc-thanks&quot;&gt;Thanks!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;!--slide-down--&gt;

&lt;h1 id=&quot;arduino&quot;&gt;Arduino&lt;/h1&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;I always wanted to write a post with some sort of help for those curious about the fascinating world of Arduino. Here it is. Finally my getting started guide.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Please, stay only if…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you’re &lt;strong&gt;curious&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;you’re looking for &lt;strong&gt;new hobbies&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;you have some &lt;strong&gt;programming skills&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;you’re at &lt;strong&gt;no risk of divorce&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;A &lt;strong&gt;real disclaimer&lt;/strong&gt;, arduino is a time sucker, same level as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3D printing,&lt;/li&gt;
  &lt;li&gt;video games,&lt;/li&gt;
  &lt;li&gt;aeromodelling,&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Be careful&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h3&gt;

&lt;p&gt;Arduino is a &lt;strong&gt;company and a community&lt;/strong&gt; that designs and manufactures &lt;strong&gt;single-board microcontrollers&lt;/strong&gt; and microcontroller kits for building &lt;strong&gt;digital devices&lt;/strong&gt; &amp;lt;&lt;em&gt;with the &lt;strong&gt;framework to program them&lt;/strong&gt;&lt;/em&gt;&amp;gt;.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;its-uses&quot;&gt;Its uses?&lt;/h3&gt;

&lt;p&gt;Mostly pocket-sized devices with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A specific purpose (&lt;em&gt;embedded system&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;A minimalistic or no user interface&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;High&lt;/em&gt; power efficiency&lt;/li&gt;
  &lt;li&gt;Need for portability&lt;/li&gt;
  &lt;li&gt;Low price&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;No Operating System&lt;/em&gt; needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOTE: For those more into it already, keep in mind that all the items above are indicative. Sure you can have an arduino with 3 simple purposes, the user interface could be a color LCD still, maybe not efficient if you use no sleep features, no portability if you have a automatic window opening system, price can vary if you have a very expensive sensor, there are some so called operating systems for Arduino like Mongoose OS, …&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;arduino-vs-raspberry&quot;&gt;Arduino vs. Raspberry?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Also a pocket-size board&lt;/li&gt;
  &lt;li&gt;It’s a full computer though&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Has an Operating System&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;More expensive than most Arduino boards (~30€ the cheapest on &lt;a href=&quot;https://www.amazon.fr/Raspberry-Plaque-mod%C3%A8le-Cortex-11811853/dp/B07KKBCXLY/ref=sr_1_3?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;amp;dchild=1&amp;amp;keywords=raspberry+pi&amp;amp;qid=1588318997&amp;amp;sr=8-3&quot;&gt;amazon.fr&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;could last a day&lt;/strong&gt; on batteries (maximum)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OUT OF SCOPE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NOTE: Saw some videos making a big deal out of a Raspberry running on batteries for 14 hours.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;arduino-vs-&quot;&gt;Arduino vs. *?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;FPGA&lt;/li&gt;
  &lt;li&gt;ESPuma&lt;/li&gt;
  &lt;li&gt;uPython&lt;/li&gt;
  &lt;li&gt;Blynk&lt;/li&gt;
  &lt;li&gt;Mongoose OS&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OUT OF SCOPE&lt;/strong&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;why-so-trendy&quot;&gt;Why so trendy?&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;Boards can be way cheaper than a laptop&lt;/li&gt;
  &lt;li&gt;Lots of cool applications (IoT)
    &lt;ul&gt;
      &lt;li&gt;Smart Home&lt;/li&gt;
      &lt;li&gt;Smart City&lt;/li&gt;
      &lt;li&gt;Environment&lt;/li&gt;
      &lt;li&gt;Security&lt;/li&gt;
      &lt;li&gt;Industrial IoT&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;Wider scope than just programming&lt;/li&gt;
  &lt;li&gt;Interact with the real world / physics
    &lt;ul&gt;
      &lt;li&gt;Actuators&lt;/li&gt;
      &lt;li&gt;Sensors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build something useful&lt;/li&gt;
  &lt;li&gt;Be creative&lt;/li&gt;
  &lt;li&gt;Think out of the box&lt;/li&gt;
  &lt;li&gt;Have fun&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;how-to-get-started&quot;&gt;How to get started?&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;main-ingredients&quot;&gt;Main ingredients&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;An arduino-compatible board&lt;/li&gt;
  &lt;li&gt;Some sensor/s&lt;/li&gt;
  &lt;li&gt;Some user interface/s&lt;/li&gt;
  &lt;li&gt;A power supply&lt;/li&gt;
  &lt;li&gt;A firmware&lt;/li&gt;
&lt;/ol&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Proposed ingredients (&lt;strong&gt;to buy&lt;/strong&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Board: &lt;a href=&quot;https://www.amazon.fr/Yizhet-NodeMCU-ESP8266-ESP-12E-D%C3%A9veloppement/dp/B07XJWK5F4/ref=sr_1_3?dchild=1&amp;amp;keywords=ESP8266+nodeMCU&amp;amp;qid=1588339084&amp;amp;sr=8-3&quot;&gt;&lt;strong&gt;NodeMCU esp8266&lt;/strong&gt; (~5€)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sensor: &lt;a href=&quot;https://www.amazon.fr/dp/B07DPSMRJ6/ref=cm_sw_em_r_mt_&quot;&gt;&lt;strong&gt;a button&lt;/strong&gt; (~3€ each)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;UI: &lt;a href=&quot;https://www.amazon.fr/dp/B07PR5T67K/ref=cm_sw_em_r_mt_dp_U_NncREbE6NZ3Q3&quot;&gt;&lt;strong&gt;some leds&lt;/strong&gt; (~3€)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Power: laptop &lt;a href=&quot;https://www.amazon.fr/dp/B0711PVX6Z/ref=cm_sw_em_r_mt_&quot;&gt;(+ &lt;strong&gt;an usb cable&lt;/strong&gt; (~3€))&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Firmware: &lt;a href=&quot;https://github.com/mauriciojost/esp8266-blinking-led&quot;&gt;blinking led&lt;/a&gt; using &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;The component aboves are not the cheapest, but the simplest to get started with!!!&lt;/em&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h3 id=&quot;procedure&quot;&gt;Procedure&lt;/h3&gt;

&lt;!--slide-down--&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://docs.platformio.org/en/latest/core/installation.html&quot;&gt;PlatformIO Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;(opt.) Install the &lt;a href=&quot;https://platformio.org/platformio-ide&quot;&gt;PlatformIO IDE&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--slide-down--&gt;

&lt;ol&gt;
  &lt;li&gt;Connect your laptop to the &lt;strong&gt;NodeMCU esp8266&lt;/strong&gt; using the &lt;strong&gt;usb cable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Clone the &lt;a href=&quot;https://github.com/mauriciojost/esp8266-blinking-led&quot;&gt;blinking led&lt;/a&gt; project&lt;/li&gt;
  &lt;li&gt;Connect the leds to the board as described in &lt;a href=&quot;https://github.com/mauriciojost/esp8266-blinking-led/blob/master/src/Pinout.h&quot;&gt;the Pinout.h header&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Launch &lt;code class=&quot;highlighter-rouge&quot;&gt;platformio run --target upload&lt;/code&gt; to load firmware&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;That’s it!&lt;/strong&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;in-my-pipeline&quot;&gt;In my pipeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Framework to facilitate
    &lt;ul&gt;
      &lt;li&gt;Properties setup&lt;/li&gt;
      &lt;li&gt;Development&lt;/li&gt;
      &lt;li&gt;Logs retrieval&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Projects
    &lt;ul&gt;
      &lt;li&gt;Botino&lt;/li&gt;
      &lt;li&gt;Sleepino&lt;/li&gt;
      &lt;li&gt;Bimbino (proto ready)&lt;/li&gt;
      &lt;li&gt;Zino (to come)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks!&lt;/h2&gt;

</description>
        <pubDate>Thu, 30 Apr 2020 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2020/04/30/arduino-finally-getting-started/post.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2020/04/30/arduino-finally-getting-started/post.html</guid>
        
        <category>arduino</category>
        
        <category>newbie</category>
        
        <category>esp8266</category>
        
        
      </item>
    
      <item>
        <title>Quicky on Enumeratum for Scala 2</title>
        <description>&lt;h1 id=&quot;enumeratum&quot;&gt;Enumeratum&lt;/h1&gt;

&lt;p&gt;Enumerations for &lt;em&gt;Scala&lt;/em&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;nav&gt;
  &lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeratum&quot; id=&quot;markdown-toc-enumeratum&quot;&gt;Enumeratum&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#why-should-i-care&quot; id=&quot;markdown-toc-why-should-i-care&quot;&gt;Why should I care?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-to-wish&quot; id=&quot;markdown-toc-what-to-wish&quot;&gt;What to wish?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-code-them&quot; id=&quot;markdown-toc-how-to-code-them&quot;&gt;How to code them?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-using-scalaenumeration&quot; id=&quot;markdown-toc-1-using-scalaenumeration&quot;&gt;1. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.Enumeration&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-using-scala-sealed-case&quot; id=&quot;markdown-toc-2-using-scala-sealed-case&quot;&gt;2. Using Scala &lt;code class=&quot;highlighter-rouge&quot;&gt;sealed case&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3-switching-to-scala-3&quot; id=&quot;markdown-toc-3-switching-to-scala-3&quot;&gt;3. Switching to Scala 3&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-using-enumeratum&quot; id=&quot;markdown-toc-4-using-enumeratum&quot;&gt;4. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;enumeratum&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#thanks&quot; id=&quot;markdown-toc-thanks&quot;&gt;Thanks!&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#other-posts&quot; id=&quot;markdown-toc-other-posts&quot;&gt;Other posts&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;why-should-i-care&quot;&gt;Why should I care?&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;Enumerations are fundamental&lt;/li&gt;
  &lt;li&gt;You wish &lt;strong&gt;less maintenance&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Find bugs at compile time&lt;/li&gt;
      &lt;li&gt;Code easy to understand&lt;/li&gt;
      &lt;li&gt;Meaningful data types&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;“Let the compiler help you!!!”&lt;/em&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;Many code smells come from enums
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://refactoring.guru/smells/primitive-obsession&quot;&gt;Primitive obsession&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;readMode: String&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://refactoring.guru/refactoring/smells/change-preventers&quot;&gt;Change preventers&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Scala 2&lt;/em&gt; native enums are &lt;strong&gt;flawed&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;what-to-wish&quot;&gt;What to wish?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i.pinimg.com/236x/29/06/1e/29061ea2855d7036d66507a674e799eb--macarons-th-birthday.jpg&quot; height=&quot;300&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;Exhaustive pattern matching (&lt;strong&gt;safety&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;No type erasure (&lt;strong&gt;method overloading&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;Default methods for &lt;strong&gt;de/serialization&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;List all&lt;/strong&gt; possible values&lt;/li&gt;
  &lt;li&gt;Values to have &lt;strong&gt;extra fields&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Values to be provided an &lt;strong&gt;ordering&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(from &lt;a href=&quot;https://pedrorijo.com/blog/scala-enums/&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;how-to-code-them&quot;&gt;How to code them?&lt;/h2&gt;

&lt;!--slide-next--&gt;

&lt;h3 id=&quot;1-using-scalaenumeration&quot;&gt;1. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.Enumeration&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enumeration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Value&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;(+) native&lt;/li&gt;
  &lt;li&gt;(-) No exhaustiveness checks&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Blue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// and other colors??? (!!!)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// no warning, nothing...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://pngimage.net/wp-content/uploads/2018/06/oh-my-god-png-8.png&quot; height=&quot;200&quot; width=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;(-) Cannot do method overloading (type erasure)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// take(Enumeration.this.Value)Unit is &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   already defined in the scope&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://www.kindpng.com/picc/b/88/883319.png&quot; height=&quot;300&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;(on de/serialization)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(+) Built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;(-) Its &lt;code class=&quot;highlighter-rouge&quot;&gt;.withName&lt;/code&gt; method is mean&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;withName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chucknorris&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// throws NoSuchElementException... &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// :. No referentially transparent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;(+) Easy to list all values (&lt;code class=&quot;highlighter-rouge&quot;&gt;Color.values&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;(+) Values are provided an ordering&lt;/li&gt;
  &lt;li&gt;(-) Does not support extra fields&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Could not code this:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       r g b&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Red   1 0 0 &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Green 0 1 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Blue  0 0 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@yuriigorbylov/scala-enumerations-hell-5bdba2c1216&quot;&gt;(more details)&lt;/a&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h3 id=&quot;2-using-scala-sealed-case&quot;&gt;2. Using Scala &lt;code class=&quot;highlighter-rouge&quot;&gt;sealed case&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Red&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blue&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;(+) &lt;em&gt;Scala 2&lt;/em&gt; &lt;strong&gt;native&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(+) &lt;strong&gt;Exhaustive&lt;/strong&gt; pattern matching&lt;/li&gt;
  &lt;li&gt;(+) &lt;strong&gt;No type erasure&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(-) Missing &lt;code class=&quot;highlighter-rouge&quot;&gt;.withName&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;(-) Missing &lt;code class=&quot;highlighter-rouge&quot;&gt;.values&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;(+) Values can have &lt;strong&gt;attributes&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(+) Values can have &lt;strong&gt;functions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(-) Values are not provided with an ordering&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h3 id=&quot;3-switching-to-scala-3&quot;&gt;3. Switching to Scala 3&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Scala 3 / &lt;code class=&quot;highlighter-rouge&quot;&gt;dotty&lt;/code&gt; addresses this issue
    &lt;ul&gt;
      &lt;li&gt;See &lt;a href=&quot;http://dotty.epfl.ch/docs/reference/enums/enums.html&quot;&gt;this&lt;/a&gt; for more info&lt;/li&gt;
      &lt;li&gt;(-) Scala 3 &lt;a href=&quot;https://dotty.epfl.ch/docs/&quot;&gt;not ready&lt;/a&gt;!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h3 id=&quot;4-using-enumeratum&quot;&gt;4. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;enumeratum&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;(~) &lt;a href=&quot;https://github.com/lloydmeta/enumeratum&quot;&gt;A library&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;(+) No dependencies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(+) &lt;strong&gt;Exhaustive&lt;/strong&gt; pattern matching&lt;/li&gt;
  &lt;li&gt;(+) &lt;strong&gt;No type erasure&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(+) Provides &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.withName&lt;/code&gt; method&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(+) Provides &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.values&lt;/code&gt; method&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;(+) Values can have &lt;strong&gt;attributes&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(+) Values can have &lt;strong&gt;methods&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(+) Values are provided an &lt;strong&gt;ordering&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(+) &lt;strong&gt;Faster&lt;/strong&gt; than &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.Enumeration&lt;/code&gt; (from the standard library!)&lt;/li&gt;
  &lt;li&gt;(+) &lt;strong&gt;Integration with pureconfig&lt;/strong&gt;, among other libs&lt;/li&gt;
  &lt;li&gt;(+) And more!&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;h4 id=&quot;examples-i&quot;&gt;Examples I&lt;/h4&gt;

&lt;p&gt;Plain example:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;enumeratum._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnumEntry&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findValues&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// magic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;h4 id=&quot;examples-ii&quot;&gt;Examples II&lt;/h4&gt;

&lt;p&gt;Values with attributes: &lt;a href=&quot;https://github.com/mauriciojost/main4ino-server/blob/master/src/main/scala/org/mauritania/main4ino/security/Permission.scala#L11&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h4 id=&quot;examples-iii&quot;&gt;Examples III&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pureconfig/pureconfig&quot;&gt;Pureconfig&lt;/a&gt; integration: &lt;a href=&quot;https://github.com/mauriciojost/main4ino-server/blob/master/src/main/scala/org/mauritania/main4ino/security/Permission.scala&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks!&lt;/h2&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;other-posts&quot;&gt;Other posts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pedrorijo.com/blog/scala-enums/&quot;&gt;From Pedro Rijo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2020/04/20/enumeratum-for-scala-2/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2020/04/20/enumeratum-for-scala-2/presentation.html</guid>
        
        <category>scala</category>
        
        <category>enumeratum</category>
        
        <category>enum</category>
        
        
      </item>
    
      <item>
        <title>Dump your JVM</title>
        <description>&lt;p&gt;This is a ultra-short post on JVM debugging tools. Did you get an &lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemoryError&lt;/code&gt; and have no idea how to proceed? This post is for you.&lt;/p&gt;

&lt;h2 id=&quot;an-example-for-memory-analysis&quot;&gt;An example for memory analysis&lt;/h2&gt;

&lt;p&gt;I’d like to start with a dummy application as example. We will make it run and analyse its memory heap. With the tools I will introduce you can analyse many other indicators, but the procedure to get to that point hast the same initial steps. Once in the tool you can explore by yourself.&lt;/p&gt;

&lt;p&gt;This application simply will create a huge amount of &lt;code class=&quot;highlighter-rouge&quot;&gt;UUID&lt;/code&gt; instances and keep them in memory for a while.  If we analyse it correctly, we should see them somewhere in our memory heap. So let’s get started.&lt;/p&gt;

&lt;p&gt;Put in &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.scala&lt;/code&gt; the following:&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.mauritania&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.UUID.randomUUID&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Nb&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1500000&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// my unique id string dummy class&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Myuids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Myuids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clearly we’re allocating many &lt;code class=&quot;highlighter-rouge&quot;&gt;Myuids&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;Launch it as follows (using &lt;code class=&quot;highlighter-rouge&quot;&gt;scalac&lt;/code&gt; 2.11.7 here):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scalac Main.scala
scala com.mauritania.Main

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;generating-heap-dumps&quot;&gt;Generating heap dumps&lt;/h2&gt;

&lt;p&gt;There are sevaral ways to generate heap dumps (&lt;code class=&quot;highlighter-rouge&quot;&gt;.hprof&lt;/code&gt; files) before we can analyse them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;jmap&lt;/code&gt; JDK’s tool as follows:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; jmap -dump:format=b,file=heap.hprof &amp;lt;pid-of-running-jvm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;Connecting to JVM via &lt;code class=&quot;highlighter-rouge&quot;&gt;mat&lt;/code&gt; tool&lt;/li&gt;
  &lt;li&gt;Connecting to JVM via &lt;code class=&quot;highlighter-rouge&quot;&gt;jmc&lt;/code&gt; tool&lt;/li&gt;
  &lt;li&gt;Connecting to JVM via &lt;code class=&quot;highlighter-rouge&quot;&gt;jvisualvm&lt;/code&gt; tool&lt;/li&gt;
  &lt;li&gt;Requesting the JVM to dump the heap on OOM using the following JVM settings:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=/tmp/heap.dump/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;analysing-heap-dumps&quot;&gt;Analysing heap dumps&lt;/h2&gt;

&lt;h3 id=&quot;eclipse-memory-analyser-mat&quot;&gt;Eclipse Memory Analyser (&lt;code class=&quot;highlighter-rouge&quot;&gt;mat&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;The easiest way of analysing memory heaps is using &lt;code class=&quot;highlighter-rouge&quot;&gt;mat&lt;/code&gt; tool.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the standalone Eclipse Memory Analyser (EMA, or &lt;code class=&quot;highlighter-rouge&quot;&gt;mat&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;mat&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/mat-init.png&quot; alt=&quot;Mat&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get the memory dump of the just started JVM, it must be an &lt;code class=&quot;highlighter-rouge&quot;&gt;hprof&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Choose the &lt;code class=&quot;highlighter-rouge&quot;&gt;Component report&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/mat-choose-component.png&quot; alt=&quot;Component&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Point to the package you’re monitoring (in a regex), for instance &lt;code class=&quot;highlighter-rouge&quot;&gt;com\.mauritania\..*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now you must see a pie chart.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/mat-pie-chart.png&quot; alt=&quot;Pie&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Top Consumers&lt;/code&gt;, see their size in MB.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/mat-top-consumers.png&quot; alt=&quot;Top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The chart shows how &lt;code class=&quot;highlighter-rouge&quot;&gt;Myuids&lt;/code&gt; instances are occupying the heap, just as expected.&lt;/p&gt;

&lt;p&gt;Note: normally you can also open &lt;code class=&quot;highlighter-rouge&quot;&gt;.hprof&lt;/code&gt; files with &lt;code class=&quot;highlighter-rouge&quot;&gt;jhat&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;java-mission-control-jmc&quot;&gt;Java Mission Control (&lt;code class=&quot;highlighter-rouge&quot;&gt;jmc&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;Let’s now use &lt;code class=&quot;highlighter-rouge&quot;&gt;jmc&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add the following settings to your JVM:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-XX:+StartAttachListener
-XX:+UnlockCommercialFeatures
-XX:+FlightRecorder
-XX:FlightRecorderOptions=
  defaultrecording=true,
  dumponexit=true,
  dumponexitpath=/tmp/jfr/,
  repository=/tmp/jfr/,
  disk=true
-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=/tmp/heap.dump/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Upon an &lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemoryError&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;HeapDump*&lt;/code&gt; settings will make the JVM create a heap dump under &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/heap.dump/java_pidXXXXX.hprof&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Upon exit the &lt;code class=&quot;highlighter-rouge&quot;&gt;FlightRecorder*&lt;/code&gt; settings will make the JVM create a report under &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/jfr/hotspot-pid-XXXXX-id-XXXXXXXXXXX.jfr&lt;/code&gt; (which does not have memory heap exhaustive information, but more general indicators)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Regarding our own application, it is enough to launch our application as follows, as all I wanted is to connect to the JVM without dump files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -cp .:&amp;lt;path-to&amp;gt;/scala/lib/scala-library.jar \
  -XX:+UnlockCommercialFeatures \
  -XX:+FlightRecorder \
  com.mauritania.Main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;You can open the &lt;code class=&quot;highlighter-rouge&quot;&gt;.hprof&lt;/code&gt; heap dump as seen in the sections above.&lt;/li&gt;
  &lt;li&gt;To open the &lt;code class=&quot;highlighter-rouge&quot;&gt;.jfr&lt;/code&gt; you need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Java Mission Control&lt;/code&gt; (tool from jdk: &lt;code class=&quot;highlighter-rouge&quot;&gt;jmc&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Instead of opening an existent &lt;code class=&quot;highlighter-rouge&quot;&gt;.jfr&lt;/code&gt; you can make &lt;code class=&quot;highlighter-rouge&quot;&gt;jmc&lt;/code&gt; connect to an existent JVM, as follows:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a. Create a new connection&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/jmc-connect.png&quot; alt=&quot;Connect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b. Set up the recording settings&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/jmc-save.png&quot; alt=&quot;Save&quot; /&gt;
&lt;img src=&quot;/images/posts/dump-jvm/jmc-settings.png&quot; alt=&quot;Save&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c. Interestingly you can request &lt;code class=&quot;highlighter-rouge&quot;&gt;jmc&lt;/code&gt; to record certain events from the JVM, like &lt;code class=&quot;highlighter-rouge&quot;&gt;file open&lt;/code&gt; event. This can be useful if you consider your application is slow because it has too much IO.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/jmc-event-recording-settings.png&quot; alt=&quot;Event&quot; /&gt;&lt;/p&gt;

&lt;p&gt;d. Start recording&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/jmc-start.png&quot; alt=&quot;Start&quot; /&gt;
&lt;img src=&quot;/images/posts/dump-jvm/jmc-recording.png&quot; alt=&quot;Rec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;e. See general performance indicators, their evolution in time too&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/jmc-stats1.png&quot; alt=&quot;Stats&quot; /&gt;&lt;/p&gt;

&lt;p&gt;f. Go deeper into memory consumption under package &lt;code class=&quot;highlighter-rouge&quot;&gt;org.mauritania&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dump-jvm/jmc-object-statistics.png&quot; alt=&quot;Stats&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;extra-notes&quot;&gt;Extra notes&lt;/h2&gt;

&lt;p&gt;Use the following JVM settings to get garbage collection activities logs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-XX:+PrintGCDetails 
-XX:+PrintGCTimeStamps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 20 Jul 2019 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2019/07/20/dump-your-jvm.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2019/07/20/dump-your-jvm.html</guid>
        
        <category>jvm</category>
        
        <category>java</category>
        
        <category>scala</category>
        
        <category>oom</category>
        
        <category>jmc</category>
        
        <category>mat</category>
        
        <category>eclipse</category>
        
        <category>jdk</category>
        
        <category>heap</category>
        
        
      </item>
    
      <item>
        <title>Exception Handling in Spark 2.x</title>
        <description>&lt;h1 id=&quot;why-exception-handling-eh-in-spark&quot;&gt;Why Exception Handling (E.H.) in Spark?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;data is rarely ideal&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;some scenarios don’t deserve an &lt;strong&gt;immediate&lt;/strong&gt; halt&lt;/li&gt;
  &lt;li&gt;investigate newer scenarios as-per-priority (happier customers)&lt;/li&gt;
  &lt;li&gt;ease product evolution&lt;/li&gt;
  &lt;li&gt;understand application limitations&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-are-exceptions&quot;&gt;What are Exceptions?&lt;/h1&gt;

&lt;p&gt;Exceptions are &lt;strong&gt;failures&lt;/strong&gt; that &lt;strong&gt;prevent our code from completing successfully an operation&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Generally speaking, in the batch &amp;amp; streaming processing world, correctly handling exceptions
gives the development team more time to evaluate logs and better decide how to handle different scenarios.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;types-of-failures&quot;&gt;Types of Failures&lt;/h1&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Failures &lt;a href=&quot;https://tersesystems.com/blog/2012/12/27/error-handling-in-scala/&quot;&gt;can be classified as&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Expected Internal&lt;/strong&gt; (a circuit breaker)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expected External&lt;/strong&gt; (a parsing exception)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unexpected Internal&lt;/strong&gt; (a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unexpected External&lt;/strong&gt; (a host down)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;Among others, failures can be classified by importance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NonFatal&lt;/code&gt; (can be recovered)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fatal&lt;/code&gt; (cannot be recovered)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Or by determinism:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Deterministic&lt;/code&gt; (can be reproduced consistently)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Non deterministic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;spark-exception-handling-eh&quot;&gt;Spark Exception Handling (E.H.)&lt;/h2&gt;

&lt;p&gt;Generally speaking, Spark exceptions can be divided in two groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Unexpected failures&lt;/strong&gt;: generally non-deterministic, fatal or non fatal (Spark framework via task retries)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expected failures&lt;/strong&gt;: generally deterministic, non fatal -&amp;gt; &lt;strong&gt;this post&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;application-eh-approaches&quot;&gt;Application E.H. approaches&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The no-exception-handling approach&lt;/li&gt;
  &lt;li&gt;The try-catch and log approach&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Try&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;Either&lt;/code&gt; approach&lt;/li&gt;
  &lt;li&gt;The Accumulator approach&lt;/li&gt;
  &lt;li&gt;More evolved approaches&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-no-exception-handling-approach&quot;&gt;The no-exception-handling approach&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The world has to be ideal, or crash.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Spark app will fail if upon retries a task keeps failing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
def country(cityCode: String): String = {
  cities(cityCode).get.country
  // the city has to be found!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;When to use? Prototypes only.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-try-catch-and-log-approach&quot;&gt;The try-catch and log approach&lt;/h2&gt;

&lt;p&gt;Report unexpected scenarios via logs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May generate significant amount of logs (performance!)&lt;/li&gt;
  &lt;li&gt;Generally not purely functional&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
def country(cityCode: String): String = {
  try {
    cities(cityCode).get.country
  } catch {
    Log.warn(s&quot;Unexpected city $cityCode&quot;)
    &quot;UnknownCountry&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;Not really appealing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Requires the use of RM tools to retrieve logs (as not in HDFS)&lt;/li&gt;
  &lt;li&gt;Difficult to test&lt;/li&gt;
  &lt;li&gt;However provides by default multiple levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-try--either-approach&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Try&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;Either&lt;/code&gt; approach&lt;/h2&gt;

&lt;p&gt;Return &lt;code class=&quot;highlighter-rouge&quot;&gt;Try&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;Either&lt;/code&gt; types always.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Purely functional&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; reports are part of the output of a transformation&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
def country(cityCode: String): Try[String] = {
  Try{cities(cityCode).get.country}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use-1&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;Maybe the most appealing approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Results are stored in HDFS&lt;/li&gt;
  &lt;li&gt;Easy to test&lt;/li&gt;
  &lt;li&gt;Easy to reason about&lt;/li&gt;
  &lt;li&gt;Spark/Hadoop agnostic&lt;/li&gt;
  &lt;li&gt;Can be tricky to save simultaneously &lt;code class=&quot;highlighter-rouge&quot;&gt;Success&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Right&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Failure&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Left&lt;/code&gt; sides (could be slow, requiring multiple actions to be triggered)&lt;/li&gt;
  &lt;li&gt;Does not provide support for levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-accumulator-approach&quot;&gt;The Accumulator approach&lt;/h2&gt;

&lt;p&gt;Use the Spark &lt;code class=&quot;highlighter-rouge&quot;&gt;Accumulator&lt;/code&gt; mechanism to report statistics on specific scenarios.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not meant to retrieve detailed information about the failure&lt;/li&gt;
  &lt;li&gt;Function argument is mutable (often seen as bad practice)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
def country(cityCode: String, ac: Accumulator): String = {
  cities(cityCode) match {
    case Some(city) =&amp;gt; city.country
    case None =&amp;gt; {ac += 1; &quot;UnknownCountry&quot;}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use-2&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;The Spark approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Results can be printed in &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; or stored in HDFS easily&lt;/li&gt;
  &lt;li&gt;Relatively easy to test&lt;/li&gt;
  &lt;li&gt;Spark framework dependant&lt;/li&gt;
  &lt;li&gt;Should be very fast&lt;/li&gt;
  &lt;li&gt;Does not provide support for levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;more-evolved-approaches&quot;&gt;More evolved approaches&lt;/h2&gt;

&lt;p&gt;Will be in a different post.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

&lt;p&gt;If you have any comments, let me know!&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Nov 2017 23:00:00 +0100</pubDate>
        <link>http://mauriciojost.github.io/2017/11/07/exception-handling-in-spark-2/post.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/11/07/exception-handling-in-spark-2/post.html</guid>
        
        <category>scala</category>
        
        <category>spark</category>
        
        <category>error</category>
        
        <category>exception</category>
        
        <category>handling</category>
        
        <category>try</category>
        
        <category>catch</category>
        
        
      </item>
    
      <item>
        <title>Exception Handling in Spark 2.x</title>
        <description>&lt;h1 id=&quot;why-exception-handling-eh-in-spark&quot;&gt;Why Exception Handling (E.H.) in Spark?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;data is rarely ideal&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;some scenarios don’t deserve an &lt;strong&gt;immediate&lt;/strong&gt; halt&lt;/li&gt;
  &lt;li&gt;investigate newer scenarios as-per-priority (happier customers)&lt;/li&gt;
  &lt;li&gt;ease product evolution&lt;/li&gt;
  &lt;li&gt;understand application limitations&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-are-exceptions&quot;&gt;What are Exceptions?&lt;/h1&gt;

&lt;p&gt;Exceptions are &lt;strong&gt;failures&lt;/strong&gt; that &lt;strong&gt;prevent our code from completing successfully an operation&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Generally speaking, in the batch &amp;amp; streaming processing world, correctly handling exceptions
gives the development team more time to evaluate logs and better decide how to handle different scenarios.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;types-of-failures&quot;&gt;Types of Failures&lt;/h1&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Failures &lt;a href=&quot;https://tersesystems.com/blog/2012/12/27/error-handling-in-scala/&quot;&gt;can be classified as&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Expected Internal&lt;/strong&gt; (a circuit breaker)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expected External&lt;/strong&gt; (a parsing exception)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unexpected Internal&lt;/strong&gt; (a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unexpected External&lt;/strong&gt; (a host down)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-ignore-end--&gt;

&lt;p&gt;Among others, failures can be classified by importance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NonFatal&lt;/code&gt; (can be recovered)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fatal&lt;/code&gt; (cannot be recovered)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Or by determinism:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Deterministic&lt;/code&gt; (can be reproduced consistently)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Non deterministic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;spark-exception-handling-eh&quot;&gt;Spark Exception Handling (E.H.)&lt;/h2&gt;

&lt;p&gt;Generally speaking, Spark exceptions can be divided in two groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Unexpected failures&lt;/strong&gt;: generally non-deterministic, fatal or non fatal (Spark framework via task retries)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expected failures&lt;/strong&gt;: generally deterministic, non fatal -&amp;gt; &lt;strong&gt;this post&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;application-eh-approaches&quot;&gt;Application E.H. approaches&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The no-exception-handling approach&lt;/li&gt;
  &lt;li&gt;The try-catch and log approach&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Try&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;Either&lt;/code&gt; approach&lt;/li&gt;
  &lt;li&gt;The Accumulator approach&lt;/li&gt;
  &lt;li&gt;More evolved approaches&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-no-exception-handling-approach&quot;&gt;The no-exception-handling approach&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The world has to be ideal, or crash.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Spark app will fail if upon retries a task keeps failing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
def country(cityCode: String): String = {
  cities(cityCode).get.country
  // the city has to be found!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;When to use? Prototypes only.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-try-catch-and-log-approach&quot;&gt;The try-catch and log approach&lt;/h2&gt;

&lt;p&gt;Report unexpected scenarios via logs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May generate significant amount of logs (performance!)&lt;/li&gt;
  &lt;li&gt;Generally not purely functional&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
def country(cityCode: String): String = {
  try {
    cities(cityCode).get.country
  } catch {
    Log.warn(s&quot;Unexpected city $cityCode&quot;)
    &quot;UnknownCountry&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;Not really appealing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Requires the use of RM tools to retrieve logs (as not in HDFS)&lt;/li&gt;
  &lt;li&gt;Difficult to test&lt;/li&gt;
  &lt;li&gt;However provides by default multiple levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-try--either-approach&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Try&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;Either&lt;/code&gt; approach&lt;/h2&gt;

&lt;p&gt;Return &lt;code class=&quot;highlighter-rouge&quot;&gt;Try&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;Either&lt;/code&gt; types always.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Purely functional&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; reports are part of the output of a transformation&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
def country(cityCode: String): Try[String] = {
  Try{cities(cityCode).get.country}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use-1&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;Maybe the most appealing approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Results are stored in HDFS&lt;/li&gt;
  &lt;li&gt;Easy to test&lt;/li&gt;
  &lt;li&gt;Easy to reason about&lt;/li&gt;
  &lt;li&gt;Spark/Hadoop agnostic&lt;/li&gt;
  &lt;li&gt;Can be tricky to save simultaneously &lt;code class=&quot;highlighter-rouge&quot;&gt;Success&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Right&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Failure&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Left&lt;/code&gt; sides (could be slow, requiring multiple actions to be triggered)&lt;/li&gt;
  &lt;li&gt;Does not provide support for levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;the-accumulator-approach&quot;&gt;The Accumulator approach&lt;/h2&gt;

&lt;p&gt;Use the Spark &lt;code class=&quot;highlighter-rouge&quot;&gt;Accumulator&lt;/code&gt; mechanism to report statistics on specific scenarios.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not meant to retrieve detailed information about the failure&lt;/li&gt;
  &lt;li&gt;Function argument is mutable (often seen as bad practice)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;scala&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
def country(cityCode: String, ac: Accumulator): String = {
  cities(cityCode) match {
    case Some(city) =&amp;gt; city.country
    case None =&amp;gt; {ac += 1; &quot;UnknownCountry&quot;}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;when-to-use-2&quot;&gt;When to use?&lt;/h3&gt;

&lt;p&gt;The Spark approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Results can be printed in &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; or stored in HDFS easily&lt;/li&gt;
  &lt;li&gt;Relatively easy to test&lt;/li&gt;
  &lt;li&gt;Spark framework dependant&lt;/li&gt;
  &lt;li&gt;Should be very fast&lt;/li&gt;
  &lt;li&gt;Does not provide support for levels of seriousness&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;more-evolved-approaches&quot;&gt;More evolved approaches&lt;/h2&gt;

&lt;p&gt;Will be in a different post.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

&lt;p&gt;If you have any comments, let me know!&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Nov 2017 23:00:00 +0100</pubDate>
        <link>http://mauriciojost.github.io/2017/11/07/exception-handling-in-spark-2/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/11/07/exception-handling-in-spark-2/presentation.html</guid>
        
        <category>scala</category>
        
        <category>spark</category>
        
        <category>error</category>
        
        <category>exception</category>
        
        <category>handling</category>
        
        <category>try</category>
        
        <category>catch</category>
        
        
      </item>
    
      <item>
        <title>Dotfiles</title>
        <description>&lt;h2 id=&quot;dotfiles-me&quot;&gt;Dotfiles? Me?&lt;/h2&gt;

&lt;p&gt;You’re eligible if you use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux&lt;/li&gt;
  &lt;li&gt;macOS&lt;/li&gt;
  &lt;li&gt;Cygwin (over Windows)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;And if at least one of the below is true:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you often ‎&lt;strong&gt;can’t remember commands&lt;/strong&gt; and flags&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log --oneline \
  --decorate --all \
  --graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;you often &lt;strong&gt;lose configs&lt;/strong&gt; of your apps (&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;htop&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;you often use &lt;strong&gt;hostile shell&lt;/strong&gt; in many remote hosts&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;_
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;you happen to enjoy a very &lt;strong&gt;&lt;span style=&quot;color:green&quot;&gt;color&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;ful &lt;/span&gt;&lt;span style=&quot;color:red&quot;&gt;environ&lt;/span&gt;&amp;lt;/span&amp;gt;&lt;span style=&quot;color:yellow&quot;&gt;ment&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;dotfiles-to-the-rescue&quot;&gt;Dotfiles to the rescue!&lt;/h2&gt;

&lt;p&gt;Dotfiles is an initiative &lt;a href=&quot;https://dotfiles.github.io/&quot;&gt;driven by GitHub&lt;/a&gt; to
keep configuration files (and more) in a repository.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;dotfiles-principles&quot;&gt;Dotfiles principles&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;customization&lt;/li&gt;
  &lt;li&gt;versioning&lt;/li&gt;
  &lt;li&gt;sharing&lt;/li&gt;
  &lt;li&gt;reusing&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;why-the-name-dotfiles&quot;&gt;Why the name dotfiles?&lt;/h2&gt;

&lt;p&gt;Files starting with &lt;strong&gt;dot&lt;/strong&gt; are often configuration files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mjost@lapin:~$ ls -lAugh \.
total 13M
drwx------   4 mjost 4.0K Oct 21 09:51 .activator
-rw-------   1 mjost 6.3K Oct 25 08:17 .aliases
drwx------   3 mjost 4.0K Oct 21 09:51 .android
drwx------   3 mjost 4.0K Oct 21 09:51 .ansible
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;who-uses-dotfiles&quot;&gt;Who uses dotfiles?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mathiasbynens/dotfiles&quot;&gt;Mathias dotfiles&lt;/a&gt;: 17k GitHub stars (*)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/spark&quot;&gt;Apache Spark&lt;/a&gt;: 14k GitHub stars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many flavors, you fork your favorite one!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(*) only one flavor!!!&lt;/em&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;what-can-dotfiles-contain&quot;&gt;What can dotfiles contain?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Shell aliases and functions&lt;/li&gt;
  &lt;li&gt;‎Any file &lt;code class=&quot;highlighter-rouge&quot;&gt;.xxx&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; (like &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;‎Any directory under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;what-ive-personally-added&quot;&gt;What I’ve personally added?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Window managers&lt;/strong&gt; settings (like &lt;code class=&quot;highlighter-rouge&quot;&gt;awesome&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;xfce&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cron job&lt;/strong&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;renice&lt;/code&gt; Intellij&lt;/li&gt;
  &lt;li&gt;Integration with &lt;strong&gt;&lt;a href=&quot;https://github.com/kepkin/dev-shell-essentials&quot;&gt;dev-shell-essentials&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;a cat&quot; | highlight green a | highlight red cat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;‎Stderr in &amp;lt;span &lt;span style=&quot;color:red&quot;&gt;red&lt;/span&gt;&lt;/strong&gt; using &lt;a href=&quot;https://github.com/sickill/stderred&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stderred&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;‎&lt;strong&gt;Code snippets&lt;/strong&gt; (for Bash specially)&lt;/li&gt;
  &lt;li&gt;‎&lt;strong&gt;How-To’s&lt;/strong&gt; (set up servers like &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;nfs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ldap&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tag with &lt;code class=&quot;highlighter-rouge&quot;&gt;$SESSION_ID&lt;/code&gt;&lt;/strong&gt; commands in history&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tag with &lt;code class=&quot;highlighter-rouge&quot;&gt;$PWD&lt;/code&gt;&lt;/strong&gt; commands in history&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Aliases&lt;/strong&gt; for commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; and others&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Key Mappings&lt;/strong&gt; for Intellij&lt;/li&gt;
  &lt;li&gt;and much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;how-to-get-started-with-dotfiles&quot;&gt;How to get started with dotfiles?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Choose your &lt;a href=&quot;https://dotfiles.github.io/&quot;&gt;flavor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install it and use it!&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot; data-trim=&quot;&quot; contenteditable=&quot;&quot;&gt;
# clone your flavor
git clone \
  https://github.com/mathiasbynens/dotfiles.git
# install it
cd dotfiles
bash bootstrap.sh
# done!
&lt;/code&gt;&lt;/pre&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

</description>
        <pubDate>Mon, 23 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/23/dotfiles/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/23/dotfiles/presentation.html</guid>
        
        <category>dotfiles</category>
        
        <category>shell</category>
        
        <category>linux</category>
        
        <category>macos</category>
        
        
      </item>
    
      <item>
        <title>Writing a post or a presentation? Both!</title>
        <description>&lt;h1 id=&quot;post-or-slides&quot;&gt;Post or slides?&lt;/h1&gt;

&lt;p&gt;Presentations are great. Blogs too. Which one should do I dedicate my time to?&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;No need to choose, you can do &lt;strong&gt;both at once&lt;/strong&gt;!&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;In this special &lt;strong&gt;post/presentation&lt;/strong&gt;, I will give you an example with sources
on how to build your own blog posts, and generate both:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a post, and&lt;/li&gt;
  &lt;li&gt;a presentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;from a single &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; file.&lt;/p&gt;

&lt;!--more--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;first-part&quot;&gt;First part&lt;/h1&gt;

&lt;p&gt;This is an example of an horizontal slide.&lt;/p&gt;

&lt;p&gt;Text written here appears in both the presentation and the post layouts.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Press &lt;code class=&quot;highlighter-rouge&quot;&gt;ESC&lt;/code&gt; to navigate over all the slides.&lt;/p&gt;

&lt;p&gt;You can have text that will be ignored in the presentation, but written in the
post, so you can go more into details where it really matters.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;second-part&quot;&gt;Second part&lt;/h1&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-a&quot;&gt;Second part (A)&lt;/h2&gt;

&lt;p&gt;You can add a vertical slide (I personally use them for continuation of the upper slide).&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-b&quot;&gt;Second part B&lt;/h2&gt;

&lt;p&gt;Yet another one.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-c&quot;&gt;Second part C&lt;/h2&gt;

&lt;p&gt;Last one including a figure from &lt;code class=&quot;highlighter-rouge&quot;&gt;Gravizo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?
@startuml;
skinparam monochrome false;
caption Figure 1. Example of a figure using Gravizo;
scale max 900 width;
rectangle MARKDOWN;
rectangle BLOG {;
  rectangle POST;
  rectangle PRESENTATION;
};
MARKDOWN --&amp;gt; POST;
MARKDOWN --&amp;gt; PRESENTATION;
note left of MARKDOWN: example;
@enduml;&quot; alt=&quot;Alt text&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;Here you can find:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/presentation.html&quot;&gt;The generated presentation / slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/post.html&quot;&gt;The generated blog post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mauriciojost/mauriciojost.github.io/development/_posts/2017-10-10-covariant-contravariant-invariant-in-scala.markdown&quot;&gt;The source markgown file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll official page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot;&gt;Reveal.js official git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

&lt;p&gt;And &lt;a href=&quot;https://github.com/mauriciojost/mauriciojost.github.io&quot;&gt;star the project here&lt;/a&gt; if you liked it!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/post.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/post.html</guid>
        
        <category>reveal</category>
        
        <category>blog</category>
        
        <category>markdown</category>
        
        
      </item>
    
      <item>
        <title>Writing a post or a presentation? Both!</title>
        <description>&lt;h1 id=&quot;post-or-slides&quot;&gt;Post or slides?&lt;/h1&gt;

&lt;p&gt;Presentations are great. Blogs too. Which one should do I dedicate my time to?&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;No need to choose, you can do &lt;strong&gt;both at once&lt;/strong&gt;!&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;In this special &lt;strong&gt;post/presentation&lt;/strong&gt;, I will give you an example with sources
on how to build your own blog posts, and generate both:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a post, and&lt;/li&gt;
  &lt;li&gt;a presentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;from a single &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; file.&lt;/p&gt;

&lt;!--more--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;first-part&quot;&gt;First part&lt;/h1&gt;

&lt;p&gt;This is an example of an horizontal slide.&lt;/p&gt;

&lt;p&gt;Text written here appears in both the presentation and the post layouts.&lt;/p&gt;

&lt;!--slide-ignore-begin--&gt;

&lt;p&gt;Press &lt;code class=&quot;highlighter-rouge&quot;&gt;ESC&lt;/code&gt; to navigate over all the slides.&lt;/p&gt;

&lt;p&gt;You can have text that will be ignored in the presentation, but written in the
post, so you can go more into details where it really matters.&lt;/p&gt;

&lt;!--slide-ignore-end--&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;second-part&quot;&gt;Second part&lt;/h1&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-a&quot;&gt;Second part (A)&lt;/h2&gt;

&lt;p&gt;You can add a vertical slide (I personally use them for continuation of the upper slide).&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-b&quot;&gt;Second part B&lt;/h2&gt;

&lt;p&gt;Yet another one.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h2 id=&quot;second-part-c&quot;&gt;Second part C&lt;/h2&gt;

&lt;p&gt;Last one including a figure from &lt;code class=&quot;highlighter-rouge&quot;&gt;Gravizo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?
@startuml;
skinparam monochrome false;
caption Figure 1. Example of a figure using Gravizo;
scale max 900 width;
rectangle MARKDOWN;
rectangle BLOG {;
  rectangle POST;
  rectangle PRESENTATION;
};
MARKDOWN --&amp;gt; POST;
MARKDOWN --&amp;gt; PRESENTATION;
note left of MARKDOWN: example;
@enduml;&quot; alt=&quot;Alt text&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;Here you can find:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/presentation.html&quot;&gt;The generated presentation / slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/post.html&quot;&gt;The generated blog post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mauriciojost/mauriciojost.github.io/development/_posts/2017-10-10-covariant-contravariant-invariant-in-scala.markdown&quot;&gt;The source markgown file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll official page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot;&gt;Reveal.js official git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;

&lt;p&gt;And &lt;a href=&quot;https://github.com/mauriciojost/mauriciojost.github.io&quot;&gt;star the project here&lt;/a&gt; if you liked it!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/presentation.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/16/howto-post-and-presentation/presentation.html</guid>
        
        <category>reveal</category>
        
        <category>blog</category>
        
        <category>markdown</category>
        
        
      </item>
    
      <item>
        <title>CoVariant, ContraVariant and InVariant... Variances in Scala</title>
        <description>&lt;h2 id=&quot;variance&quot;&gt;Variance&lt;/h2&gt;

&lt;p&gt;The variance in Scala aims to provide flexibility to the inheritance on parametric types.&lt;/p&gt;

&lt;p&gt;Two examples where it helps are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make &lt;code class=&quot;highlighter-rouge&quot;&gt;List[Dog]&lt;/code&gt; a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;List[Animal]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Reuse a function &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal=&amp;gt;Boolean&lt;/code&gt; as a function &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog=&amp;gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-next--&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;a-concrete-example&quot;&gt;A concrete example&lt;/h3&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;https://g.gravizo.com/svg?
@startuml;
skinparam monochrome false;
caption Figure 1. Example types;
scale max 900 width;
Animal &amp;lt;|-- Dog;
Animal &amp;lt;|-- Cat;
@enduml;&quot; alt=&quot;Alt text&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Our pet classes
sealed class Animal
class Dog extends Animal
class Cat extends Animal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Let’s say you work for a veterinary. You’re writing an API.&lt;/p&gt;

&lt;p&gt;You want to &lt;strong&gt;modularize the functions
that retrieve pets’ information from a DB&lt;/strong&gt;, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getBreed&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Then, we could define a class &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&lt;/code&gt; that will encapsulate an
&lt;em&gt;information retriever&lt;/em&gt; function, &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is our first attempt:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Func[I,O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Good! We can define our first instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Our first information retriever
// Is my animal a dog?
val isADog: Func[Animal, Boolean] = {
  new Func((i: Animal) =&amp;gt; i.isInstanceOf[Dog])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-next--&gt;

&lt;p&gt;We say that &lt;strong&gt;&lt;em&gt;Fun&lt;/em&gt; is invariant in &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;) and invariant in &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;)&lt;/strong&gt;, as there is not subtype association
done by the compiler.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;generalizing-func-covariance&quot;&gt;Generalizing &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&lt;/code&gt;: Covariance&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Let’s say you handle many &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&lt;/code&gt; implementations:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val x:  Func[Animal, Boolean] = ...
val y:  Func[Animal, String] = ...
val z:  Func[Animal, Int] = ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;It would be good to be able to treat all &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; polymorphically.&lt;/p&gt;

&lt;p&gt;For instance be able to do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val l: List[Func[Animal, AnyVal]] =
   List(x, y, z) // won't work, invariance
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our initial declaration of &lt;code class=&quot;highlighter-rouge&quot;&gt;Func[I, O]&lt;/code&gt; was invariant in both &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;.
It &lt;strong&gt;does not allow this supertype relation&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;The solution is &lt;strong&gt;covariance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The principle: making &lt;code class=&quot;highlighter-rouge&quot;&gt;Clz&lt;/code&gt; covariant in &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; means that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat &amp;lt;: Animal&lt;/code&gt; implies&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Clz[Cat] &amp;lt;: Clz[Animal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words: the inheritance of this &lt;strong&gt;parametric&lt;/strong&gt; type follows the one from the &lt;strong&gt;parameter&lt;/strong&gt; type.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;Back to our example, we simply re-define &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&lt;/code&gt;, but making it covariant in &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// now covariant on O
class Func[I, +O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// specific type
val isADog: Func[Animal, Boolean] = ...

// generic type
val covIsDogForAnyVal: Func[Animal, AnyVal] =
        isADog   // assigned to a more general type
                 // works because
                 // Boolean &amp;lt;: AnyVal,
                 // and thanks to covariance
                 // Func[X, Boolean] &amp;lt;: Func[X, AnyVal]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;specializing-func-contravariance&quot;&gt;Specializing &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&lt;/code&gt;: Contravariance&lt;/h2&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-problem-1&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Let’s say we have our function &lt;code class=&quot;highlighter-rouge&quot;&gt;Func[Animal, Boolean]&lt;/code&gt;. Given that &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog &amp;lt;: Animal&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; is a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;),
it seems natural to be able to apply such function to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; too.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;h3 id=&quot;the-solution-1&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;The solution is &lt;strong&gt;contravariance&lt;/strong&gt;.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;The principle: making &lt;code class=&quot;highlighter-rouge&quot;&gt;Clz&lt;/code&gt; contravariant in &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; means that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat &amp;lt;: Animal&lt;/code&gt; implies&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Clz[Cat] &amp;gt;: Clz[Animal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words the inheritance of this parametric type follows
inversely the one from the parameter type.&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;We simply redefine &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&lt;/code&gt; but making it contravariant in &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; this time:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// now contravariant in I
class Func[-I, O] (val f: I =&amp;gt; O) {
  def apply(i: I): O = f(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-down--&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// generic type
val isDog: Func[Animal, Boolean] =
        new Func((i: Animal) =&amp;gt; i.isInstanceOf[Dog])

// specific type
val contrvarIsDog: Func[Dog, Boolean] =
        isDog // assigned to a more specific type
              // works because
              // Dog &amp;lt;: Animal, and thanks
              // to contravariance
              // Func[Dog, X] &amp;gt;: Func[Animal, X]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;use-in-the-scala-library&quot;&gt;Use in the Scala library&lt;/h2&gt;

&lt;p&gt;I invite you to take a look at the implementation of &lt;a href=&quot;https://github.com/scala/scala/blob/v2.12.3/src/library/scala/Function2.scala&quot;&gt;the trait Function2 in Scala v2.12&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See its declaration (ignore the &lt;code class=&quot;highlighter-rouge&quot;&gt;@specialized&lt;/code&gt; annotation):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;trait Function2[-T1, -T2, +R] extends ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What are the consequences of using covariance and contravariance?&lt;/p&gt;

&lt;!--slide-down--&gt;

&lt;p&gt;For instance for the function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val f: Function2[Animal, Cat, Dog] = ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which of these casts are illegal?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val f1: Function2[Animal, Cat, Animal] = f
val f2: Function2[Dog, Cat, Dog] = f
val f3: Function2[Cat, Cat, Dog] = f
val f4: Function2[Animal, Cat, Animal] = f
val f5: Function2[Animal, Cat, Cat] = f
val f6: Function2[Animal, Dog, Dog] = f

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is the result of applying variances:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;![Alt text](https://g.gravizo.com/svg?
@startuml;
skinparam monochrome false;
caption Figure 2. Covariance and Contravariance;
scale max 900 width;
“List[Animal]” &amp;lt;|– “List[Dog]”: “Covariance [+A]”;
“List[Animal]” &amp;lt;|– “List[Cat]”;
“Funct[Dog]” &amp;lt;|– “Funct[Animal]”: “Contravariance [-A]”;
note left of “Funct[Animal]”: When instanciated,\ncan be reused\nas Funct[Dog]\nthanks to\ncontravariance;
note right of “List[Dog]”: Can be added\nto a List[Animal]\nthanks to\ncovariance;
@enduml;
)&lt;/span&gt;&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&quot;https://docs.scala-lang.org/tour/variances.html&quot;&gt;official Scala documentation on variance&lt;/a&gt;.&lt;/p&gt;

&lt;!--slide-next--&gt;

&lt;h1 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h1&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 00:00:00 +0200</pubDate>
        <link>http://mauriciojost.github.io/2017/10/10/covariant-contravariant-invariant-in-scala/post.html</link>
        <guid isPermaLink="true">http://mauriciojost.github.io/2017/10/10/covariant-contravariant-invariant-in-scala/post.html</guid>
        
        <category>scala</category>
        
        <category>types</category>
        
        <category>covariant</category>
        
        <category>contravariant</category>
        
        <category>invariant</category>
        
        
      </item>
    
  </channel>
</rss>
